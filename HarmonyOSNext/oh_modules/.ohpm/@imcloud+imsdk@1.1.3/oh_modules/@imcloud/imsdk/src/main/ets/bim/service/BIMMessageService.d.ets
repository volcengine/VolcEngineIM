import { IMAccessor } from '@imcloud/imsdk_common/src/main/ets/api/IMAccessor';
import { IMSdkClient } from '../../client/IMSdkClient';
import { BIMGetMessageOption } from '../api/model/BIMGetMessageOption';
import { BIMResult } from '../api/model/BIMResult';
import { BIMMessageListResult } from '../api/model/BIMMessageListResult';
import { SendMsgStatus, StatusCode } from '../../api/const/consts';
import { BIMMessage } from '../api/model/BIMMessage';
import { Message } from '../../api/model/Message';
import { BIMSendCallback } from '../api/interface/BIMSendCallback';
import { BIMClient, IMessageObserver, LocalPropertyItem, ModifyMsgPropertyMsg, ReceiveMsgExtra } from '../../../../../Index';
import { UploaderManager } from '../uploader/UploaderManager';
import { BIMMessageNewPropertyModify } from '../api/model/BIMMessageNewPropertyModify';
import { ExpandService } from '@imcloud/imsdk_common/src/main/ets/api/ExpandService';
export declare class BIMMessageService implements ExpandService, IMessageObserver {
    private _tag;
    private _innerSdk;
    private _msgDataSource;
    private _conversationDao;
    private _serviceManager;
    private _uploadManager;
    private _bimClient;
    constructor(context: Context, innerSdk: IMSdkClient, bimClient: BIMClient);
    onConfigReady(json: string): void;
    getUploaderManager(): UploaderManager;
    getHistoryMessageList(conversationId: string, option: BIMGetMessageOption): Promise<BIMResult<BIMMessageListResult>>;
    getHistoryMessageListFromServer(conversationId: string, option: BIMGetMessageOption, localMsgListResult: BIMMessageListResult): Promise<BIMResult<BIMMessageListResult>>;
    createMessageByType(msgType: number, contentJson: string): Nullable<BIMMessage>;
    createTextMessage(text: string): Nullable<BIMMessage>;
    createTextMessageFullInfo(text: string, atUidList?: bigint[], refMessage?: BIMMessage, hint?: string): BIMMessage | undefined;
    private sendMessageInner;
    sendMessage(message: BIMMessage, conversationId: string, sendCallback?: BIMSendCallback): Promise<void>;
    private sendMessageMedia;
    addMessage(message: BIMMessage, conversationId: string): Promise<BIMResult<BIMMessage>>;
    log(tag: string, content: string): void;
    init(context: Context, imAccessor: IMAccessor): void;
    unInit(context: Context): void;
    onLogin(context: Context, uid: bigint): void;
    onLogout(): void;
    onSendMessage(statusCode: SendMsgStatus, message: Message): void;
    onSendMessageAsyncResp(message: Message, hasChanged: boolean): void;
    onAddMessage(statusCode: StatusCode, message: Message): void;
    onGetMessage(list: Message[], msgSource: number, extra: ReceiveMsgExtra): void;
    onDelMessage(message: Message): void;
    onQueryMessage(list: Message[], direction: number, from?: string | undefined): void;
    onRegisterStickObserver(list: Message[]): void;
    onUpdateMessage(list: Message[]): void;
    onEditMessage(list: Message[]): void;
    onRecallMessage(message: Message): void;
    onClearMessage(conversationId: string, needNotify: boolean): void;
    onGetModifyPropertyMsg(msg: Message, oldPropertyMap: Map<string, LocalPropertyItem[]>, newProperty: Map<string, LocalPropertyItem[]>): void;
    onSendModifyPropertyMsg(statusCode: number, modifyMsgPropertyMsg: ModifyMsgPropertyMsg): void;
    createImageMessage(uri: string): Promise<Nullable<BIMMessage>>;
    createImageMessageByType(uri: string, imageType: number): Promise<Nullable<BIMMessage>>;
    createVideoMessage(uri: string): Promise<Nullable<BIMMessage>>;
    createFileMessage(uri: string): Promise<Nullable<BIMMessage>>;
    createAudioMessage(uri: string): Promise<Nullable<BIMMessage>>;
    createCustomMessage(content: string): Nullable<BIMMessage>;
    deleteMessage(bimMessage: BIMMessage): Promise<BIMResult<boolean>>;
    recallMessage(bimMessage: BIMMessage): Promise<BIMResult<boolean>>;
    modifyMessage(message: BIMMessage): Promise<BIMResult<Nullable<BIMMessage>>>;
    modifyMessageProperty(message: BIMMessage, propertyItems: BIMMessageNewPropertyModify[]): Promise<BIMResult<boolean>>;
    refreshMediaMessage(bimMessage: BIMMessage, isUpdateDb?: boolean): Promise<BIMResult<Nullable<BIMMessage>>>;
    setMessageLocalExt(message: BIMMessage, localExt: Map<string, string>): Promise<BIMResult<Nullable<BIMMessage>>>;
    private isFileSizeValid;
}
