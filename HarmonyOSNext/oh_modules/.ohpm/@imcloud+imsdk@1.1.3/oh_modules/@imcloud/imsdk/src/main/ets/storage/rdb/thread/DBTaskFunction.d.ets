import relationalStore from "@ohos.data.relationalStore";
import { ValueType as ValueType } from "@ohos.data.ValuesBucket";
import sendableContextManager from "@ohos.app.ability.sendableContextManager";
import { TaskResultSet, TaskBResult } from './TaskResultSet';
export declare function insertBatchTask(context: Context, config: relationalStore.StoreConfig | undefined, tableName: string, buckets: relationalStore.ValuesBucket[]): Promise<TaskBResult>;
export declare function insertTask(context: Context, config: relationalStore.StoreConfig | undefined, tableName: string, buckets: relationalStore.ValuesBucket, type: relationalStore.ConflictResolution): Promise<TaskBResult>;
export declare function updateTask(context: Context, config: relationalStore.StoreConfig | undefined, tableName: string, value: relationalStore.ValuesBucket, whereClause: string, args: ValueType[]): Promise<TaskBResult>;
export declare function deleteTask(context: Context, config: relationalStore.StoreConfig | undefined, table: string, whereClause: string, whereArgs?: string[]): Promise<TaskBResult>;
export declare function deleteFun(context: sendableContextManager.SendableContext, config: relationalStore.StoreConfig, table: string, whereClause: string, whereArgs: string[]): Promise<TaskBResult>;
export declare function queryTask(context: Context, config: relationalStore.StoreConfig | undefined, whereClause: string, arg: Array<ValueType> | undefined, bigIntColumns?: string[]): Promise<TaskResultSet>;
