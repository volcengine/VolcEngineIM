import { IMAccessor } from '@imcloud/imsdk_common/src/main/ets/api/IMAccessor';
import { IMSdkClient } from '../../client/IMSdkClient';
import { BIMConversation } from '../api/model/BIMConversation';
import { BIMResult } from '../api/model/BIMResult';
import { BIMConversationListResult } from '../api/model/BIMConversationListResult';
import { BIMConversationListListener } from '../api/interface/BIMConversationListListener';
import { BIMUnReadInfo } from '../api/model/BIMUnReadInfo';
import { BIMGroupInfo } from '../api/model/BIMGroupInfo';
import { BIMClient } from '../api/BIMClient';
import { BIMMember } from '../api/model/BIMMember';
import { BIMMemberRole } from '../api/enum/BIMMemberRole';
import { ExpandService } from '@imcloud/imsdk_common/src/main/ets/api/ExpandService';
export declare class BIMConversationService implements ExpandService {
    private _innerSdk;
    private _conversationDao;
    private _bimClient;
    private _serviceManager;
    private readonly tag;
    constructor(_innerSdk: IMSdkClient, bimClient: BIMClient);
    onConfigReady(json: string): void;
    init(context: Context, imAccessor: IMAccessor): void;
    unInit(context: Context): void;
    onLogin(context: Context, uid: bigint): void;
    onLogout(): void;
    getConversationList(cursor: number, count: number): Promise<BIMResult<BIMConversationListResult>>;
    getConversation(conversationId: string): Promise<BIMResult<Nullable<BIMConversation>>>;
    getTotalUnreadMessageCount(): Promise<BIMUnReadInfo>;
    notifyUnreadAll(conv: BIMConversation | undefined): Promise<void>;
    notifyUnread(listener: BIMConversationListListener): Promise<void>;
    addGroupMemberList(conversationId: string, ids: string[]): Promise<BIMResult<boolean>>;
    removeGroupMemberList(conversationId: string, ids: string[]): Promise<BIMResult<boolean>>;
    setGroupMemberRole(conversationId: string, ids: string[], role: BIMMemberRole): Promise<BIMResult<boolean>>;
    dissolveGroup(conversationId: string, isDeleteLocal: boolean): Promise<BIMResult<boolean>>;
    leaveGroup(conversationId: string, isDeleteServer: boolean): Promise<BIMResult<boolean>>;
    setGroupName(conversationId: string, name: string): Promise<BIMResult<boolean>>;
    setGroupNotice(conversationId: string, notice: string): Promise<BIMResult<boolean>>;
    setConversationLocalExt(conversationId: string, ext: Map<string, string>): Promise<BIMResult<boolean>>;
    setConversationMyExt(conversationId: string, ext: Map<string, string>): Promise<BIMResult<boolean>>;
    setConversationCoreExt(conversationId: string, ext: Map<string, string>): Promise<BIMResult<boolean>>;
    stickTopConversation(conversationId: string, isStickTop: boolean): Promise<BIMResult<boolean>>;
    muteConversation(conversationId: string, isMute: boolean): Promise<BIMResult<boolean>>;
    markConversationRead(conversationId: string): Promise<BIMResult<boolean>>;
    createSingleConversation(toUid: bigint): Promise<BIMResult<BIMConversation | undefined>>;
    createGroupConversation(info: BIMGroupInfo, uidList: bigint[]): Promise<BIMResult<BIMConversation | undefined>>;
    deleteConversation(conversationId: string): Promise<BIMResult<boolean>>;
    getConversationMemberList(conversationId: string): Promise<BIMResult<BIMMember[]>>;
    setConversationDraft(draft: string, conversationId: string): Promise<void>;
    private conversationObserver;
    log(tag: string, content: string): void;
}
