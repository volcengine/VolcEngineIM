import { IMSdkContext } from '../../client/IMSdkContext';
import { IMSdkBaseObject } from '../../core/IMSdkBaseObject';
import relationalStore from '@ohos.data.relationalStore';
import { ValuesBucket, ValueType } from '@ohos.data.ValuesBucket';
import { TaskBResult, TaskResultSet } from './thread/TaskResultSet';
export declare abstract class BaseRdbManager extends IMSdkBaseObject {
    private TAG;
    protected rdb?: relationalStore.RdbStore;
    private appContext;
    private config;
    private sqlCount;
    private isAllUseThreadPool;
    constructor(context: IMSdkContext);
    abstract clearData(): Promise<void>;
    protected abstract getDbName(): string;
    protected abstract onCreateTable(rdb?: relationalStore.RdbStore): Promise<void>;
    protected abstract onCreateIndex(rdb?: relationalStore.RdbStore): Promise<void>;
    protected abstract getVersion(): number;
    protected abstract onUpgrade(oldVersion: number, newVersion: number, rdb?: relationalStore.RdbStore): Promise<void>;
    protected abstract onDowngrade(oldVersion: number, newVersion: number, rdb?: relationalStore.RdbStore): Promise<void>;
    init(): Promise<void>;
    getRdb(): relationalStore.RdbStore | undefined;
    clearTable(tableName: string): Promise<void>;
    vacuum(): Promise<void>;
    protected executeCreateIndexSql(sqls: string[]): Promise<void>;
    protected getSecurityLevel(): relationalStore.SecurityLevel;
    private createDb;
    executeSqlMainThread(sql: string, bindArgs?: Array<ValueType>): Promise<void>;
    insertT(tableName: string, bucket: relationalStore.ValuesBucket): Promise<number>;
    batchInsertT(tableName: string, bucketList: Array<ValuesBucket>): Promise<number>;
    querySqlT(sql: string, bindArgs?: Array<ValueType> | undefined, bigIntColumns?: string[], isQueryUseThreadPool?: boolean): Promise<TaskResultSet>;
    deleteT(table: string, whereClause: string, whereArgs?: string[]): Promise<TaskBResult>;
    updateT(tableName: string, valueBucket: relationalStore.ValuesBucket, whereClause: string, whereArgs?: ValueType[]): Promise<TaskBResult>;
    insertSync(tableName: string, bucket: relationalStore.ValuesBucket): Promise<number>;
    batchInsert(tableName: string, bucketList: Array<ValuesBucket>): Promise<number>;
    querySql(whereClause: string, args?: Array<ValueType> | undefined, bigIntColumns?: string[]): Promise<TaskResultSet>;
    delete(table: string, whereClause: string, whereArgs?: string[]): Promise<TaskBResult>;
    update(tableName: string, value: relationalStore.ValuesBucket, whereClause: string, whereArgs?: ValueType[]): Promise<TaskBResult>;
}
