import common from '@ohos.app.ability.common'; import { INetworkClient } from "../u1/v1"; import AppLogLogger from "../h1/n1"; import { IHeaderManager, IReadOnlyHeaderManager } from "../o1/p1/z2"; import Dispatcher from "../k/m"; import { IKVStore } from "../y1/z1"; import InitConfig from "./e"; import { URiConfig } from "./f/g"; import WorkEngine from "../a2/b2"; import EventProcessor from "../h/c2"; import PluginCenter from "../d2"; export interface IExternalSDKContext { context(): common.Context; pluginCenter(): PluginCenter; headerManager(): IReadOnlyHeaderManager; } export interface ISDKContext { runtimeUriConfig: URiConfig; context(): common.Context; headerManager(): IHeaderManager; networkClient(): INetworkClient; appLogLogger(): AppLogLogger; dispatcher(): Dispatcher; kvStore(): IKVStore; sdkInstanceKey(): string; sdkConfig(): InitConfig; workEngine(): WorkEngine; eventProcessor(): EventProcessor; pluginCenter(): PluginCenter; } export declare class SDKContext implements ISDKContext { messageDispatcher: Dispatcher; http: INetworkClient; header: IHeaderManager; logger: AppLogLogger; rawContext: common.Context; kVStore: IKVStore; instanceKey: string; initConfig: InitConfig; runtimeUriConfig: URiConfig; engine: WorkEngine; processor: EventProcessor; plugin: PluginCenter; constructor(d: common.Context, e: InitConfig, f: string, g: AppLogLogger); pluginCenter(): PluginCenter; eventProcessor(): EventProcessor; workEngine(): WorkEngine; sdkConfig(): InitConfig; sdkInstanceKey(): string; kvStore(): IKVStore; context(): Context; headerManager(): IHeaderManager; networkClient(): INetworkClient; appLogLogger(): AppLogLogger; dispatcher(): Dispatcher; } 