import BasePlugin from "../o"; import errorManager from "@ohos.app.ability.errorManager"; import LoggerTag from "../../b/h1/j1"; import { currentTimeMillis } from "../../b/k1/k2"; import appManager from '@ohos.app.ability.appManager'; import { createEvent } from "../../b/h/s1"; import GlobalLogger from "../../b/h1/i1"; const h27 = "$crash"; class CrashEvent extends BasePlugin { constructor(r27) { super(r27); } enablePlugin() { this.registerJsCrashListener(); super.enablePlugin(); } disablePlugin() { if (this.observerId) { errorManager.off('error', this.observerId); } super.disablePlugin(); } pluginName() { return CrashEvent.pluginName; } registerJsCrashListener() { let l27 = this.sdkContext.appLogLogger(); let m27 = this.sdkContext.eventProcessor(); let n27 = { async onUnhandledException(q27) { l27.warn("ErrorManager onUnhandledException, errorMsg: {}", LoggerTag.PLUGIN, q27); m27.receive(createEvent(h27, { "$is_backstage": true, "$event_time": currentTimeMillis(), "$crash_process": await g27(), "$detailed_stack": q27, "crash_type": "JS_CRASH" })); }, onException(p27) { l27.error("ErrorManager onException", p27, LoggerTag.PLUGIN); } }; try { this.observerId = errorManager.on('error', n27); } catch (o27) { l27.error("ErrorManager listener failed ", o27, LoggerTag.PLUGIN); } } } CrashEvent.pluginName = 'plugin:crashEvent'; async function g27() { let i27 = "unknown"; try { let k27 = await appManager.getRunningProcessInformation(); i27 = k27[0]?.processName ?? "unknown"; } catch (j27) { GlobalLogger.globalError("GetProcessName failed", LoggerTag.PLUGIN, j27); } return i27; } export default CrashEvent; 