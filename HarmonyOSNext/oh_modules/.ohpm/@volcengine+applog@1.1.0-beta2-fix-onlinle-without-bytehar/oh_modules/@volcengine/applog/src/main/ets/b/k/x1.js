import Dispatcher from "./m"; class OhosDispatcher extends Dispatcher { constructor(w8, x8) { super(); this.eventHub = w8.eventHub; this.instanceKey = x8; this.emitTopicMap = new Map(); } on(u8, v8) { this.eventHub.on(`${u8}_${this.instanceKey}`, v8); } once(q8, r8) { let s8 = (t8) => { r8(t8); this.off(q8, s8); }; this.on(q8, s8); } off(o8, p8) { this.eventHub.off(`${o8}_${this.instanceKey}`, p8); } emit(m8, n8) { this.eventHub.emit(`${m8}_${this.instanceKey}`, n8); this.emitTopicMap.set(m8, n8); } emitAsync(k8, l8) { setTimeout(() => { this.emit(k8, l8); }, 0); } stickyOn(i8, j8) { if (this.hasReceiveTopic(i8)) { j8(this.lastReceiveTopicParam(i8)); } this.on(i8, j8); } stickyOnce(g8, h8) { if (this.hasReceiveTopic(g8)) { h8(this.lastReceiveTopicParam(g8)); } else { this.once(g8, h8); } } hasReceiveTopic(f8) { return this.emitTopicMap.has(f8); } lastReceiveTopicParam(e8) { return this.emitTopicMap.get(e8); } } export default OhosDispatcher; 