import LoggerTag from "../../b/h1/j1"; import Topic from "../../b/k/l"; import { isHeaderDidReady } from "../../b/k1/v2"; import { getURIQueryParameter, isEmpty } from "../../b/k1/l1"; import BasePlugin from "../o"; import SimulateLoginWorker from "./c4"; export const APP_ID = "aid"; export const QR_PARAM = "qr_param"; const i32 = "url_prefix"; const j32 = "type"; class Simulate extends BasePlugin { constructor(t32) { super(t32); } pluginName() { return Simulate.pluginName; } start(o32) { if (o32) { let p32 = getURIQueryParameter(o32, APP_ID); let q32 = getURIQueryParameter(o32, QR_PARAM); let r32 = getURIQueryParameter(o32, i32); let s32 = getURIQueryParameter(o32, j32); if (isEmpty(r32)) { this.sdkContext.appLogLogger() .warn("Simulate start failed, because urlPrefix empty", LoggerTag.SIMULATE); return; } if (isHeaderDidReady(this.sdkContext.headerManager())) { this.startSimulate(p32, q32, r32, s32); } else { this.sdkContext.appLogLogger() .warn("Simulate start failed, because sdk not start, wait did ready", LoggerTag.SIMULATE); this.sdkContext.dispatcher().once(Topic.DidReady, () => { this.startSimulate(p32, q32, r32, s32); }); } } else { this.sdkContext.appLogLogger().warn("Simulate start failed, because uri param empty", LoggerTag.SIMULATE); } } startSimulate(k32, l32, m32, n32) { this.sdkContext.appLogLogger() .debug("Simulator start appId: {}, urlPrefix: {}, mode: {}, params: {}", LoggerTag.SIMULATE, k32, m32, n32, l32); if (!this.simulateLoginWorker) { this.sdkContext.appLogLogger() .debug("Simulator start create simulateUriData", LoggerTag.SIMULATE); this.simulateLoginWorker = new SimulateLoginWorker(this.sdkContext, { appId: k32, qrParam: l32, simulateUrlPrefix: m32, simulateMode: n32, }); } else { this.sdkContext.appLogLogger() .debug("Simulator start update simulateUriData", LoggerTag.SIMULATE); this.simulateLoginWorker.simulateUriData = { appId: k32, qrParam: l32, simulateUrlPrefix: m32, simulateMode: n32, }; } this.simulateLoginWorker.requestWorker(); } } Simulate.pluginName = "plugin:simulate"; export default Simulate; 