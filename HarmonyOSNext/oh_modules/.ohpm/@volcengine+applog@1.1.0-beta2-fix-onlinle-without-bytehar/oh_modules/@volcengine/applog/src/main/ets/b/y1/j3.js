import relationalStore from '@ohos.data.relationalStore'; import LoggerTag from "../h1/j1"; import { createTableV1 as r12, DEFAULT_DB_VERSION, DEFAULT_TABLE } from "./i3"; import Topic from "../k/l"; export class DefaultDbStore { constructor(k13) { this.store = null; this.tableName = DEFAULT_TABLE; this.sdkContext = k13; relationalStore.getRdbStore(k13.context(), this.getDbConfig(`AppLog_${k13.sdkInstanceKey()}`)) .then(async (m13) => { this.store = m13; k13.appLogLogger().debug("Get RdbStore successfully, version: {}", LoggerTag.DB, this.store.version); this.createOrUpdateEventTable(this.store); }) .catch((l13) => { k13.appLogLogger().error("Get RdbStore failed.", l13, LoggerTag.DB); }); } getDbConfig(i13) { let j13 = { name: `${i13}.db`, securityLevel: relationalStore.SecurityLevel.S1, encrypt: false, }; return j13; } createOrUpdateEventTable(g13) { if (g13.version == DEFAULT_DB_VERSION) { g13.executeSql(r12(this.tableName)) .then(() => { g13.version = 1; this.sdkContext.appLogLogger() .debug("CreateOrUpdateEventTable successfully, version: {}", LoggerTag.DB, g13.version); this.notifyEventDbReady(); }) .catch((h13) => { this.sdkContext.appLogLogger().error("CreateOrUpdateEventTable RdbStore failed", h13, LoggerTag.DB); }); } else { this.notifyEventDbReady(); } } notifyEventDbReady() { this.sdkContext.dispatcher().emit(Topic.EventDbReady); } listenerDataChange(f13) { } async delete(e13) { return await this.store?.delete(e13) ?? 0; } async query(d13) { return this.store?.query(d13); } async update(b13, c13) { return this.store?.update(b13, c13) ?? 0; } async transaction(y12) { try { this.sdkContext.appLogLogger().debug("Db beginTransaction", LoggerTag.DB); this.store?.beginTransaction(); let a13 = await y12(); this.store?.commit(); this.sdkContext.appLogLogger().debug("Db endTransaction commit", LoggerTag.DB); return a13; } catch (z12) { this.sdkContext.appLogLogger().error("Db transaction failed", z12, LoggerTag.DB); return null; } } insert(v12) { this.sdkContext.appLogLogger().debug("Db insert start, values: {}", LoggerTag.DB, v12); this.store?.insert(this.tableName, v12) .then((x12) => { this.sdkContext.appLogLogger() .debug("Db insert successfully, values: {}, rowID: {}", LoggerTag.DB, v12, x12); }) .catch((w12) => { this.sdkContext.appLogLogger().error("Db insert failed", w12, LoggerTag.DB); }); } async batchInsert(s12) { try { let u12 = await this.store?.batchInsert(this.tableName, s12); this.sdkContext.appLogLogger() .debug("Db batchInsert successfully, successCount: {}", LoggerTag.DB, u12); return u12; } catch (t12) { this.sdkContext.appLogLogger().error("Db batchInsert failed", t12, LoggerTag.DB); return 0; } } getDbStore() { return this.store; } } 