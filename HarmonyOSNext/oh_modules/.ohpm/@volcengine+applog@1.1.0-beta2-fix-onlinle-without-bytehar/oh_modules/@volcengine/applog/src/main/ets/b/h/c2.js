import EventType from "./j"; import LoggerTag from "../h1/j1"; import Topic from "../k/l"; import { EventDbStore } from "../y1/m2"; import { APP_VERSION, DATE_TIME, NETWORK_TYPE, TEA_EVENT_INDEX } from "./l2"; import { KEY_AB_SDK_VERSION, KEY_APP_VERSION, KEY_SSID, KEY_USER_UNIQUE_ID, KEY_USER_UNIQUE_ID_TYPE } from "../o1/p1/q1"; import { formatTimestamp } from "../k1/k2"; import Session from "../../n/n2/o2"; import { BLOCK_LIST } from "../e2/f2"; import User from "../../n/d1/e1"; import bundleManager from "@ohos.bundle.bundleManager"; import { getEventNetworkType } from "../u1/p2"; import BuildProfile from "../../../../../a"; const o1 = 10; const p1 = 0; const q1 = 200; export default class EventProcessor { constructor(a2) { this.eventList = []; this.isEventDbReady = false; this.lastProcessTaskId = -1; this.sdkContext = a2; this.eventId = a2.kvStore().get(TEA_EVENT_INDEX, 1); this.eventDbStore = new EventDbStore(a2); this.blockList = a2.kvStore().get(BLOCK_LIST, []) ?? []; let b2 = bundleManager.BundleFlag.GET_BUNDLE_INFO_DEFAULT; this.bundleInfo = bundleManager.getBundleInfoForSelfSync(b2); this.monitorEventDbReady(); this.monitorBlockListUpdate(); } monitorEventDbReady() { this.sdkContext.dispatcher().once(Topic.EventDbReady, () => { this.isEventDbReady = true; this.postProcessTask(0); }); } monitorBlockListUpdate() { this.sdkContext.dispatcher().on(Topic.BlockListUpdate, (z1) => { this.sdkContext.appLogLogger() .debug("SDK block list update, old: {}, new: {}", LoggerTag.EVENT, this.blockList, z1); if (z1) { this.blockList = z1[BLOCK_LIST]; } }); } receive(x1, y1 = false) { if (this.blockList.includes(x1.eventName)) { this.sdkContext.appLogLogger().warn("Hint block list, filter event: {}...", LoggerTag.EVENT, x1.eventName); return; } this.fillEventParam(x1); if (y1) { if (!this.isEventDbReady) { this.sdkContext.appLogLogger().warn("Event DB is not ready, processImmediately wait...", LoggerTag.EVENT); this.eventList.push(x1); } else { this.process([x1]); } } else { this.eventList.push(x1); this.postProcessTask(); } this.sdkContext.dispatcher().emit(Topic.EventReceive, { "event_json": x1.convertToJson(), "event_type": x1.eventType }); } getProcessTaskDelay() { if (this.eventList.length % o1 == 0) { return p1; } else { return q1; } } postProcessTask(v1 = this.getProcessTaskDelay()) { if (this.lastProcessTaskId != -1) { clearTimeout(this.lastProcessTaskId); } this.lastProcessTaskId = setTimeout(() => { if (!this.isEventDbReady) { this.sdkContext.appLogLogger().warn("Event DB is not ready, process wait...", LoggerTag.EVENT); return; } let w1 = this.eventList.splice(0); this.process(w1); }, v1); } process(t1) { this.eventDbStore.transaction(async () => { for (let u1 of t1) { await this.fillEventParamAsync(u1); this.sdkContext.appLogLogger() .info("Insert event, event name: {}, event json: {}", LoggerTag.EVENT, u1.displayName(), u1); this.eventDbStore.insert(u1.convertToDbBucket()); this.sdkContext.dispatcher().emit(Topic.EventStore, { "event_json": u1.convertToJson() }); } }); } fillEventParam(s1) { s1.eventId = this.eventId++; s1.sessionId = this.sdkContext.pluginCenter().getPlugin(Session.pluginName)?.sessionId ?? ""; s1.appId = this.sdkContext.sdkConfig().getAppId(); s1.sdkInstanceKey = this.sdkContext.sdkInstanceKey(); s1.putExternalFields(DATE_TIME, formatTimestamp(s1.localTimeMs)); s1.putExternalFields(KEY_AB_SDK_VERSION, this.sdkContext.headerManager().getValue(KEY_AB_SDK_VERSION, "")); if (BuildProfile.isSDKSsidMaintain) { s1.putExternalFields(KEY_SSID, this.sdkContext.headerManager().getValue(KEY_SSID, "")); } s1.putExternalFields(KEY_USER_UNIQUE_ID, this.sdkContext.pluginCenter() .getPlugin(User.pluginName)?.getUserUniqueID() ?? ""); s1.putExternalFields(`$${KEY_USER_UNIQUE_ID_TYPE}`, this.sdkContext.pluginCenter() .getPlugin(User.pluginName)?.getUserUniqueIDType() ?? ""); s1.putExternalFields(DATE_TIME, formatTimestamp(s1.localTimeMs)); if (s1.eventType === EventType.EVENT) { s1.putCustomParam(APP_VERSION, this.sdkContext.headerManager() .getValue(KEY_APP_VERSION, this.bundleInfo.versionName)); } } async fillEventParamAsync(r1) { r1.putExternalFields(NETWORK_TYPE, await getEventNetworkType(this.sdkContext.appLogLogger())); } getEventDbStore() { return this.eventDbStore; } } 