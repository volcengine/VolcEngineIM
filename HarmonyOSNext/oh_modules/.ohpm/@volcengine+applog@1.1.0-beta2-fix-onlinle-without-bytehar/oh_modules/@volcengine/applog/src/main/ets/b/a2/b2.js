import SettingWorker from "../e2/j2"; import Topic from "../k/l"; import { Sender } from "../h/i2"; import LoggerTag from "../h1/j1"; import { registerNetworkStateListener } from "../u1/p2"; export default class WorkEngine { constructor(r20) { this.sdkContext = r20; this.workers = new Map(); registerNetworkStateListener(r20); this.addWorker(new Sender(r20)); this.addWorker(new SettingWorker(r20)); this.waitHeaderReady(); } waitHeaderReady() { this.sdkContext.dispatcher().on(Topic.HeaderReady, () => { this.workers.forEach((o20, p20, q20) => { this.sdkContext.appLogLogger().debug("WaitHeaderReady for {}", LoggerTag.WORKER, p20); o20.prepareWork(); }); }); } addWorker(n20) { if (n20) { this.workers.set(n20.getWorkName(), n20); this.sdkContext.appLogLogger().debug("Add worker: {}", LoggerTag.WORKER, n20.getWorkName()); } } queryWorker(m20) { this.sdkContext.appLogLogger() .debug("Query worker, workName: {}, has: {}", LoggerTag.WORKER, m20, this.workers.has(m20)); return this.workers.get(m20); } removeWorker(l20) { if (l20) { this.workers.delete(l20.getWorkName()); this.sdkContext.appLogLogger().debug("Remove worker: {}", LoggerTag.WORKER, l20.getWorkName()); } } } 