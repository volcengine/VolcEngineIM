import LoggerTag from "../../b/h1/j1"; import BasePlugin from "../o"; import { Default, GmSm2Encryptor as p24 } from "./r3"; export const DEFAULT_CONTENT_TYPE = "application/json; charset=utf-8"; export default class Encrypt extends BasePlugin { constructor(v24) { super(v24); this.isUseEncrypt = true; this.instanceEncryptor = Default; } async encrypt(s24, t24) { if (this.isUseEncrypt) { try { return await this.instanceEncryptor.encrypt(s24, t24); } catch (u24) { this.sdkContext .appLogLogger() .error("Encrypt encrypt failed", u24, LoggerTag.PLUGIN); return s24; } } else { return s24; } } contentType() { if (this.isUseEncrypt) { return this.instanceEncryptor.contentType(); } else { return DEFAULT_CONTENT_TYPE; } } useDefaultEncrypt() { this.sdkContext.appLogLogger().debug("useDefaultEncrypt", LoggerTag.PLUGIN); this.instanceEncryptor = Default; } useSm2Encrypt(r24) { this.sdkContext.appLogLogger().debug("useSm2Encrypt", LoggerTag.PLUGIN); this.instanceEncryptor = new p24(r24); } useCustomEncryptor(q24) { this.sdkContext.appLogLogger().debug("useCustomEncryptor header: {}", LoggerTag.PLUGIN, q24?.contentType()); this.instanceEncryptor = q24; } enablePlugin() { this.isUseEncrypt = true; super.enablePlugin(); } disablePlugin() { this.sdkContext.appLogLogger().debug("disableEncrypt", LoggerTag.PLUGIN); this.isUseEncrypt = false; super.disablePlugin(); } pluginName() { return Encrypt.pluginName; } } Encrypt.pluginName = 'plugin:encrypt'; 