import { COL_APP_ID, COL_CUSTOM_PARAM, COL_EVENT_NAME, COL_EVENT_TYPE, COL_EXTERNAL_FIELDS, COL_ID, COL_LOCAL_EVENT_ID, COL_SDK_INSTANCE_KEY, COL_SESSION_ID, COL_TS, COL_USER_PARAM, EVENT_TABLE } from "./i3"; import { DefaultDbStore } from "./j3"; import relationalStore from '@ohos.data.relationalStore'; import BaseEvent from "../h/i"; import EventType from "../h/j"; import LoggerTag from "../h1/j1"; import Topic from "../k/l"; import hidebug from "@ohos.hidebug"; import { currentTimeMillis } from "../k1/k2"; import { mapToRecord } from "../k1/r1"; const n13 = 1; const o13 = 1024 * n13; const p13 = 1024 * o13; const q13 = 200; export class EventDbStore extends DefaultDbStore { constructor(n14, o14 = EVENT_TABLE) { super(n14); this.tableName = o14; } async queryEvents(a14 = this.appLogPredicates(), b14 = this.defaultQuerySize()) { this.sdkContext.appLogLogger() .debug("Query table: {} start, max querySize: {}", LoggerTag.DB, this.tableName, b14); let c14 = currentTimeMillis(); let d14 = q13; let e14 = 0; let f14 = []; let g14 = new Number(hidebug.getPss()); this.sdkContext.appLogLogger() .debug("Query pss: {}", LoggerTag.DB, (g14 != 0 ? g14 : 0)); let h14 = false; let i14 = -1; do { let j14; try { a14.limitAs(d14); if (i14 != -1) { a14.greaterThan(COL_ID, i14); } j14 = await this.query(a14); if (j14) { while (j14.goToNextRow()) { let l14 = dbResultSetToBaseEvent(j14, this.sdkContext.appLogLogger()); let m14 = JSON.stringify(l14.convertToJson()).length; this.sdkContext.appLogLogger() .debug("Query single event size: {}", LoggerTag.DB, m14); if (e14 + m14 < b14) { f14.push(l14); e14 += m14; i14 = l14.dbId ?? -1; } else { h14 = true; } } if (h14 || j14.rowCount < d14) { break; } d14 = b14 / e14 * d14; } } catch (k14) { this.sdkContext.appLogLogger().error("Query table: {} failed", k14, LoggerTag.DB, this.tableName); break; } finally { j14?.close(); } } while (e14 < b14); this.sdkContext.appLogLogger() .debug("Query table: {} finish, event count: {}, event size: {}k, query time: {}ms", LoggerTag.DB, this.tableName, f14.length, (e14 / 1024).toFixed(2), currentTimeMillis() - c14); return f14; } defaultQuerySize() { return p13 - JSON.stringify(mapToRecord(this.sdkContext.headerManager().getHeader())).length - 200; } appLogPredicates() { return new relationalStore.RdbPredicates(this.tableName).notEqualTo(COL_EVENT_TYPE, EventType.PROFILE); } async deleteEvents(u13) { this.sdkContext.appLogLogger() .info("Delete table: {} queryCount: {}", LoggerTag.DB, this.tableName, u13.length); try { let w13 = await this.transaction(async () => { let x13 = 0; for (let y13 of u13) { this.sdkContext.dispatcher().emitAsync(Topic.EventUpLoad, { "event_json": y13.convertToJson() }); let z13 = new relationalStore.RdbPredicates(this.tableName) .equalTo(COL_ID, y13.dbId) .equalTo(COL_EVENT_TYPE, y13.eventType); x13 += await this.delete(z13) ?? 0; } return x13; }); this.sdkContext.appLogLogger() .debug("Delete table: {} deleteCount: {}", LoggerTag.DB, this.tableName, w13); } catch (v13) { this.sdkContext.appLogLogger().error("DeleteEvent failed", v13, LoggerTag.DB); } } } export function dbResultSetToBaseEvent(r13, s13) { let t13 = new BaseEvent(r13.getLong(r13.getColumnIndex(COL_EVENT_TYPE)), r13.getString(r13.getColumnIndex(COL_EVENT_NAME))); t13.dbId = r13.getLong(r13.getColumnIndex(COL_ID)); t13.localTimeMs = r13.getLong(r13.getColumnIndex(COL_TS)); t13.eventId = r13.getLong(r13.getColumnIndex(COL_LOCAL_EVENT_ID)); t13.sessionId = r13.getString(r13.getColumnIndex(COL_SESSION_ID)); t13.appId = r13.getString(r13.getColumnIndex(COL_APP_ID)); t13.sdkInstanceKey = r13.getString(r13.getColumnIndex(COL_SDK_INSTANCE_KEY)); t13.externalFields = JSON.parse(r13.getString(r13.getColumnIndex(COL_EXTERNAL_FIELDS))); t13.customParam = JSON.parse(r13.getString(r13.getColumnIndex(COL_CUSTOM_PARAM))); t13.userParam = JSON.parse(r13.getString(r13.getColumnIndex(COL_USER_PARAM))); s13.debug("Query convertBaseEvent: {}", LoggerTag.DB, t13); return t13; } 