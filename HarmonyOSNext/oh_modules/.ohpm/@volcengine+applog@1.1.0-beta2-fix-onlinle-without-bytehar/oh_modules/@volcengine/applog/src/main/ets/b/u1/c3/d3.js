import http from "@ohos.net.http"; import LoggerTag from "../../h1/j1"; export class CallServerInterceptor { async intercept(n9) { let o9 = n9.getRequest(); n9.getSdkContext() .appLogLogger() .debug("CallServerInterceptor request start, request: {}", LoggerTag.NETWORK, o9); let p9 = http.createHttp(); let q9 = await p9.request(o9.uri, { method: o9.method, header: o9.headers, extraData: o9.body, expectDataType: o9.responseType, priority: o9.priority, connectTimeout: o9.connectTimeout, readTimeout: o9.connectTimeout, clientCert: o9.clientCert, dnsOverHttps: o9.dnsOverHttps, dnsServers: o9.dnsServers, }); n9.getSdkContext() .appLogLogger() .debug("CallServerInterceptor request end, originalResponse: {}", LoggerTag.NETWORK, q9); if (q9.responseCode == http.ResponseCode.OK) { if (typeof q9.result === "string") { return this.buildResponse(q9, n9.getSdkContext()); } else if (q9.result instanceof ArrayBuffer) { return this.buildResponse(q9, n9.getSdkContext()); } else { return this.buildResponse(q9, n9.getSdkContext()); } } else { return this.buildResponse(q9, n9.getSdkContext()); } } buildResponse(k9, l9) { let m9 = { httpStatusCode: k9.responseCode, rawResponse: JSON.stringify(k9.result), headers: k9.header, result: k9.result, cookies: k9.cookies, performanceTiming: k9.performanceTiming }; l9.appLogLogger() .debug("CallServerInterceptor request end, buildAppLogResponse: {} ", LoggerTag.NETWORK, m9); return m9; } } 