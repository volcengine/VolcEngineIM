import { AppLogHelper } from "../../b/g1"; class JsBridge { constructor(p22) { this.instanceKey = p22; } getAppLogInstance() { return AppLogHelper.queryInstance(this.instanceKey) ?? null; } setNativeAppId(o22) { } setUserUniqueId(n22) { this.getAppLogInstance()?.user()?.setUserUniqueID(n22); } setHeaderInfo(l22) { for (let m22 of Object.entries(l22)) { this.addHeaderInfo(m22[0], m22[1]); } } addHeaderInfo(j22, k22) { this.getAppLogInstance()?.setHeaderInfo(j22, k22); } removeHeaderInfo(i22) { this.getAppLogInstance()?.removeHeaderInfo(i22); } onEventV3(f22, g22) { try { if (g22) { this.getAppLogInstance()?.event(f22, JSON.parse(g22)); } else { this.getAppLogInstance()?.event(f22); } } catch (h22) { } } profileSet(e22) { this.getAppLogInstance()?.profile()?.set(e22); } profileSetOnce(d22) { this.getAppLogInstance()?.profile()?.setOnce(d22); } profileIncrement(c22) { this.getAppLogInstance()?.profile()?.increment(c22); } profileAppend(b22) { this.getAppLogInstance()?.profile()?.append(b22); } profileUnset(a22) { this.getAppLogInstance()?.profile()?.unset(a22); } getAbSdkVersion() { return this.getAppLogInstance()?.abTest()?.getAbSdkVersion() ?? ''; } getABTestConfigValueForKey(y21, z21) { return this.getAppLogInstance()?.abTest()?.getAbConfig(y21, z21) ?? z21; } getAllAbTestConfigs() { return this.getAppLogInstance()?.abTest()?.getAllAbTestConfigs() ?? {}; } } JsBridge.osName = 'harmonyos'; JsBridge.methodNames = [ 'osName', 'setNativeAppId', 'setUserUniqueId', 'setHeaderInfo', 'addHeaderInfo', 'removeHeaderInfo', 'onEventV3', 'profileSet', 'profileSetOnce', 'profileIncrement', 'profileAppend', 'profileUnset', 'getAbSdkVersion', 'getABTestConfigValueForKey', 'getAllAbTestConfigs', ]; JsBridge.bridgeName = 'AppLogBridge'; export default JsBridge; 