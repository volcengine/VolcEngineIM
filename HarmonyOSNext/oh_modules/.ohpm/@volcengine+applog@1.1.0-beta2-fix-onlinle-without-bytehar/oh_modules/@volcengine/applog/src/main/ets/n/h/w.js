import BasePlugin from "../o"; import hiAppEvent from "@ohos.hiviewdfx.hiAppEvent"; import LoggerTag from "../../b/h1/j1"; import { createEvent } from "../../b/h/s1"; const s27 = "HiAppEvent"; export default class b extends BasePlugin { constructor(g28) { super(g28); this.eventWatch = null; } enablePlugin() { this.registerHiAppEventWatch(); super.enablePlugin(); } disablePlugin() { if (this.eventWatch) { hiAppEvent.removeWatcher(this.eventWatch); } super.disablePlugin(); } registerHiFreezeEventWatch() { hiAppEvent.addWatcher({ name: "freeze_watch", appEventFilters: [ { domain: hiAppEvent.domain.OS, names: [hiAppEvent.event.APP_FREEZE] } ], onReceive: (c28, d28) => { this.sdkContext.appLogLogger().debug(`HiAppEvent onReceive: domain=${c28}`, LoggerTag.PLUGIN); for (const e28 of d28) { this.sdkContext.appLogLogger().debug(`HiAppEvent eventName=${e28.name}`, LoggerTag.PLUGIN); for (const f28 of e28.appEventInfos) { this.sdkContext.appLogLogger().debug(`HiAppEvent eventInfo.domain=${f28.domain}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger().debug(`HiAppEvent eventInfo.name=${f28.name}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.eventType=${f28.eventType}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.time=${f28.params['time']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.foreground=${f28.params['foreground']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.bundle_version=${f28.params['bundle_version']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.bundle_name=${f28.params['bundle_name']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.process_name=${f28.params['process_name']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.pid=${f28.params['pid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.uid=${f28.params['uid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.uuid=${f28.params['uuid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.exception=${JSON.stringify(f28.params['exception'])}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.hilog.size=${f28.params['hilog'].length}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.event_handler.size=${f28.params['event_handler'].length}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.event_handler_size_3s=${f28.params['event_handler_size_3s']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.event_handler_size_6s=${f28.params['event_handler_size_6s']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.peer_binder.size=${f28.params['peer_binder'].length}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.threads.size=${f28.params['threads'].length}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.memory=${JSON.stringify(f28.params['memory'])}`, LoggerTag.PLUGIN); } } } }); } registerHiCrashEventWatch() { hiAppEvent.addWatcher({ name: "crash_watch", appEventFilters: [ { domain: hiAppEvent.domain.OS, names: [hiAppEvent.event.APP_CRASH] } ], onReceive: (y27, z27) => { this.sdkContext.appLogLogger().debug(`HiAppEvent onReceive: domain=${y27}`, LoggerTag.PLUGIN); for (const a28 of z27) { this.sdkContext.appLogLogger().debug(`HiAppEvent eventName=${a28.name}`, LoggerTag.PLUGIN); for (const b28 of a28.appEventInfos) { this.sdkContext.appLogLogger().debug(`HiAppEvent eventInfo.domain=${b28.domain}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger().debug(`HiAppEvent eventInfo.name=${b28.name}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.eventType=${b28.eventType}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.time=${b28.params['time']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.crash_type=${b28.params['crash_type']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.foreground=${b28.params['foreground']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.bundle_version=${b28.params['bundle_version']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.bundle_name=${b28.params['bundle_name']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.pid=${b28.params['pid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.uid=${b28.params['uid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.uuid=${b28.params['uuid']}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.exception=${JSON.stringify(b28.params['exception'])}`, LoggerTag.PLUGIN); this.sdkContext.appLogLogger() .debug(`HiAppEvent eventInfo.params.hilog.size=${b28.params['hilog']?.length}`, LoggerTag.PLUGIN); } } } }); } registerHiAppEventWatch() { this.eventWatch = { name: "app_event_watch", triggerCondition: { row: 1 }, onTrigger: (t27, u27, v27) => { if (v27 == null) { this.sdkContext.appLogLogger().debug("HiAppEvent holder is null", LoggerTag.PLUGIN); return; } let w27 = null; while ((w27 = v27.takeNext()) != null) { for (const x27 of w27.data) { this.sdkContext.eventProcessor().receive(createEvent(s27, JSON.parse(x27))); this.sdkContext.appLogLogger().debug("HiAppEvent eventPkg.info={}", LoggerTag.PLUGIN, x27); } } } }; hiAppEvent.addWatcher(this.eventWatch); } pluginName() { return b.pluginName; } } b.pluginName = 'plugin:hiAppEvent'; 