import { KEY_APP_VERSION, KEY_HEADER, KEY_OS, KEY_SDK_VERSION } from "../../b/o1/p1/q1"; import { HARMONY_OS } from "../../b/o1/p1/w1"; import LoggerTag from "../../b/h1/j1"; import { BaseWorker, RETRY_SAME } from "../../b/a2/g2"; import RangersEventVerifyWorker from "./b4"; import { APP_ID, QR_PARAM } from "./c1"; import { checkSimulateResponseIsOk } from "./a4"; const u32 = "/simulator/mobile/login"; const v32 = "set-cookie"; const w32 = "debug_log"; export default class SimulateLoginWorker extends BaseWorker { constructor(c33, d33) { super(c33, LoggerTag.SIMULATE); this.workName = 'work:simulate_login'; this.simulateUriData = d33; } isWorkerAutoStart() { return false; } getWorkName() { return this.workName; } getRequestUrl() { return this.simulateUriData.simulateUrlPrefix + u32; } parseResponse(z32) { let a33 = JSON.parse(z32.result); a33.cookies = z32.cookies; if (checkSimulateResponseIsOk(a33)) { if (this.simulateUriData.simulateMode === w32) { let b33 = z32.headers[v32]; this.simulateBaseWorker = new RangersEventVerifyWorker(this.sdkContext, this.simulateUriData, b33 ? b33.join(";") : ""); this.simulateBaseWorker.requestWorker(); } else { this.sdkContext.appLogLogger() .warn("{} start failed, not support mode ", LoggerTag.SIMULATE, this.getWorkName(), this.simulateUriData.simulateMode); } } else { this.sdkContext.appLogLogger() .warn("{} request failed, because {}", LoggerTag.SIMULATE, this.getWorkName(), a33); } } buildRequestBody() { let x32 = {}; let y32 = {}; y32[APP_ID] = this.simulateUriData.appId; y32[KEY_OS] = HARMONY_OS; y32[KEY_APP_VERSION] = this.sdkContext.headerManager().getValue(KEY_APP_VERSION, ""); y32[KEY_SDK_VERSION] = this.sdkContext.headerManager().getValue(KEY_SDK_VERSION, ""); x32[KEY_HEADER] = y32; x32[QR_PARAM] = this.simulateUriData.qrParam; return JSON.stringify(x32); } getRetryIntervals() { return RETRY_SAME; } } 