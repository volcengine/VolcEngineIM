import { KEY_SSID, KEY_USER_UNIQUE_ID, KEY_USER_UNIQUE_ID_TYPE } from "../../b/o1/p1/q1"; import LoggerTag from "../../b/h1/j1"; import Topic from "../../b/k/l"; import { strEqualsOrBothNull } from "../../b/k1/l1"; import BasePlugin from "../o"; export default class User extends BasePlugin { constructor(k33) { super(k33); } pluginName() { return User.pluginName; } disablePlugin() { this.sdkContext.appLogLogger().warn("unsupported disable user plugin.", LoggerTag.USER); } setUserUniqueID(f33, g33 = this.sdkContext.headerManager().getValue(KEY_USER_UNIQUE_ID_TYPE, "")) { let h33 = this.sdkContext.headerManager().getValue(KEY_USER_UNIQUE_ID, ""); this.sdkContext.appLogLogger().debug("setUserUniqueID lastUuid: {}", LoggerTag.USER, h33); let i33 = this.sdkContext.headerManager().getValue(KEY_USER_UNIQUE_ID_TYPE, ""); this.sdkContext.appLogLogger().debug("setUserUniqueID lastUuidType: {}", LoggerTag.USER, i33); if (strEqualsOrBothNull(h33, f33) && strEqualsOrBothNull(i33, g33)) { this.sdkContext.appLogLogger() .debug("SetUserUniqueID return, because uuid & type not change", LoggerTag.USER); return; } this.sdkContext.dispatcher().emit(Topic.UUIDChangeBefore, { "old_uuid": h33, "old_uuidType": i33 }); this.sdkContext.headerManager().updateHeader(KEY_SSID, "", true); this.sdkContext.headerManager().updateHeader(KEY_USER_UNIQUE_ID, f33, true); this.sdkContext.headerManager().updateHeader(KEY_USER_UNIQUE_ID_TYPE, g33, true); this.sdkContext.dispatcher().emit(Topic.UUIDChangeAfter, { "old_uuid": h33, "old_uuidType": i33, "new_uuid": f33 ?? "null", "new_uuidType": g33 ?? "null" }); let j33 = {}; j33[KEY_SSID] = ""; this.sdkContext.dispatcher().emit(Topic.SSIDChange, j33); } getUserUniqueID() { return this.sdkContext.headerManager().getValue(KEY_USER_UNIQUE_ID, ""); } getUserUniqueIDType() { return this.sdkContext.headerManager().getValue(KEY_USER_UNIQUE_ID_TYPE, ""); } } User.pluginName = "plugin:user"; 