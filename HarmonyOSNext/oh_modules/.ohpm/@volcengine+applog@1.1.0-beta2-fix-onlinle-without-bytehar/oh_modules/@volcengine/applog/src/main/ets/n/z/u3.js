import { checkEventSsidReady, RETRY_INTERVALS } from "../../b/h/i2"; import { KEY_EVENT, KEY_GEN_TIME, KEY_HEADER, KEY_LOCAL_TIME, KEY_MAGIC, KEY_MAGIC_VALUE } from "../../b/o1/p1/q1"; import LoggerTag from "../../b/h1/j1"; import { checkResponseOk, isNetworkAvailableFast } from "../../b/u1/p2"; import { currentTimeMillis } from "../../b/k1/k2"; import { BaseWorker } from "../../b/a2/g2"; import { mapToRecord } from "../../b/k1/r1"; import ProfileDbHelper from "./v3"; import { buildRequest } from "../../b/u1/s2"; export default class ProfileWorker extends BaseWorker { constructor(f30) { super(f30, LoggerTag.PROFILE); this.workName = 'work:profile'; this.dbHelper = new ProfileDbHelper(f30); } getWorkName() { return this.workName; } getRequestUrl() { return this.sdkContext.runtimeUriConfig.getProfileUri(); } async requestWorker() { if (!isNetworkAvailableFast()) { this.sdkContext.appLogLogger() .warn("Not net availableï¼Œ{} not requested, try again later", this.workerLoggerTag, this.getWorkName()); this.waitNetAvailableRequestAgain(); return; } this.sdkContext.appLogLogger().info("{} start request", this.workerLoggerTag, this.getWorkName()); let z29 = await this.dbHelper.queryProfile(); if (z29.length == 0) { this.sdkContext.appLogLogger() .info("{} profile request return, because profileEvents empty", this.workerLoggerTag, this.getWorkName()); return; } let a30 = z29.map((e30) => { return e30.convertToJson(); }); await checkEventSsidReady(a30, this.sdkContext, this.workName); this.sdkContext.appLogLogger() .info("{} queryProfiles: {}", LoggerTag.SENDER, this.getWorkName(), a30.length); let b30 = this.buildEventRequestBody(JSON.stringify(mapToRecord(this.sdkContext.headerManager() .getHeader())), a30); try { let d30 = await this.sdkContext.networkClient() .execute(buildRequest(this.getRequestUrl(), b30)); this.sdkContext.appLogLogger() .info("{} request return {}", LoggerTag.PROFILE, this.getWorkName(), d30); await this.parseResponse(d30, z29); } catch (c30) { this.sdkContext.appLogLogger() .error("{} request returns exception", c30, this.workerLoggerTag, this.getWorkName()); this.requestWorkFailed(); } } getRetryIntervals() { return RETRY_INTERVALS; } buildEventRequestBody(v29, w29) { let x29 = {}; x29[KEY_MAGIC] = KEY_MAGIC_VALUE; x29[KEY_HEADER] = JSON.parse(v29); if (w29.length > 0) { x29[KEY_EVENT] = w29; } let y29 = currentTimeMillis(); x29[KEY_LOCAL_TIME] = y29 / 1000; x29[KEY_GEN_TIME] = y29; return JSON.stringify(x29); } async parseResponse(t29, u29 = []) { if (checkResponseOk(t29)) { await this.dbHelper.deleteProfiles(u29); } } isWorkerAutoStart() { return false; } } 