import { currentTimeMillis } from "../k1/k2"; import { EVENT, LOCAL_TIME_MS, PARAMS, SESSION_ID, TEA_EVENT_INDEX } from "./l2"; import { KEY_USER_UNIQUE_ID } from "../o1/p1/q1"; import EventType from "./j"; export default class BaseEvent { constructor(g1, h1) { this.sessionId = ""; this.appId = ""; this.sdkInstanceKey = ""; this.externalFields = {}; this.customParam = {}; this.userParam = {}; this.eventType = g1; this.eventName = h1 ?? ""; this.localTimeMs = currentTimeMillis(); this.eventId = 1; } setEventCreateTime(f1) { this.localTimeMs = f1; } putExternalFields(d1, e1) { if (e1) { this.externalFields[d1] = e1; } } putCustomParam(b1, c1) { this.customParam[b1] = c1; } convertToDbBucket() { return { EVENT_TYPE: this.eventType, EVENT_NAME: this.eventName, LOCAL_TIME_MS: this.localTimeMs, EVENT_LOCAL_ID: this.eventId, SESSION_ID: this.sessionId, APP_ID: this.appId, SDK_INSTANCE_KEY: this.sdkInstanceKey, EXTERNAL_FIELDS: JSON.stringify(this.externalFields), CUSTOM_PARAM: JSON.stringify(this.customParam), USER_PARAM: JSON.stringify(this.userParam), }; } convertToJson() { let a1 = {}; a1[LOCAL_TIME_MS] = this.localTimeMs; a1[TEA_EVENT_INDEX] = this.eventId; a1[SESSION_ID] = this.sessionId; this.parseRecordParamToEventJson(a1, this.externalFields); this.parseRecordParamToEventJson(a1, this.userParam); if (this.eventType != EventType.LAUNCH && this.eventType != EventType.TERMINATE) { a1[PARAMS] = this.customParam; } if (this.eventName) { a1[EVENT] = this.eventName; } if (!a1[KEY_USER_UNIQUE_ID]) { a1[KEY_USER_UNIQUE_ID] = null; } return a1; } displayName() { let z; switch (this.eventType) { case EventType.LAUNCH: z = "launch"; break; case EventType.TERMINATE: z = "terminate"; break; case EventType.EVENT: case EventType.PROFILE: z = this.eventName; break; default: if (this.eventName) { z = this.eventName; } else { z = `unknown, type:${this.eventType}`; } } return z; } parseRecordParamToEventJson(w, x) { for (let y of Object.entries(x)) { w[y[0]] = y[1]; } } } 