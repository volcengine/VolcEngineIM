import { cryptoFramework } from '@kit.CryptoArchitectureKit'; export interface IEncryptor { encrypt(data: ArrayBuffer, length: number): Promise<ArrayBuffer>; contentType(): string; } declare class w24 implements IEncryptor { contentType(): string; encrypt(u25: ArrayBuffer, v25: number): Promise<ArrayBuffer>; } export declare class GmSm2Encryptor implements IEncryptor { pubKeyStr: string; constructor(t25: string); encryptInner(o25: cryptoFramework.DataBlob): Promise<ArrayBuffer>; insertAtBeginning(l25: Uint8Array, m25: number): Uint8Array; uint8ArrayToHexStr(h25: Uint8Array): string; convertStrToPubKey(a25: string): Promise<cryptoFramework.PubKey>; contentType(): string; encrypt(x24: ArrayBuffer, y24: number): Promise<ArrayBuffer>; } export declare const Default: w24; export {}; 