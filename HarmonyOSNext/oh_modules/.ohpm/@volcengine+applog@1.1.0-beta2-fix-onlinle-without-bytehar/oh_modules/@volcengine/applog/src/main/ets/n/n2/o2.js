import { generateUUID } from "../../b/k1/w2"; import BasePlugin from "../o"; import LoggerTag from "../../b/h1/j1"; import Launch from "./w3"; import Terminate from "./y3"; import Topic from "../../b/k/l"; import { ORIGINAL_SESSION_ID } from "../../b/h/l2"; const l30 = generateUUID(); export default class Session extends BasePlugin { constructor(k31) { super(k31); this.sessionId = ""; this.sessionIndex = 1; this.resumeFromBackground = false; this.runTimeLaunch = null; this.lastTerminate = null; this.currPageInfo = null; j30(this, k31); k30(this, k31); this.sdkContext.dispatcher().on(Topic.SDKInit, () => { this.checkFistLaunch(); }); } enablePlugin() { this.sdkContext.dispatcher().on(Topic.UUIDChangeBefore, () => { if (this.runTimeLaunch) { this.terminate(); this.lastTerminate = null; } }); this.sdkContext.dispatcher().on(Topic.UUIDChangeAfter, () => { this.launch(this.sessionId); }); super.enablePlugin(); } disablePlugin() { this.sdkContext.appLogLogger().warn("unsupported disable user plugin.", LoggerTag.SESSION); } pluginName() { return Session.pluginName; } checkFistLaunch() { if (!this.runTimeLaunch) { this.launch(); } } updateUIAbilityInfo(j31) { this.currPageInfo = { pageTitle: j31.context.abilityInfo.name, pageKey: `${j31.context.abilityInfo.bundleName}.${j31.context.abilityInfo.name}` }; this.checkFistLaunch(); } startSession() { this.sessionId = `${l30}_${this.sdkContext.sdkInstanceKey()}_${this.sessionIndex++}`; } launch(i31) { this.startSession(); this.sdkContext.appLogLogger().debug("Create launch", LoggerTag.SESSION); this.runTimeLaunch = new Launch(this.resumeFromBackground, this.currPageInfo?.pageTitle, this.currPageInfo?.pageKey); if (i31) { this.runTimeLaunch.putExternalFields(ORIGINAL_SESSION_ID, i31); } this.sdkContext.eventProcessor().receive(this.runTimeLaunch); } terminate() { if (this.runTimeLaunch) { this.sdkContext.appLogLogger().debug("Create terminate", LoggerTag.SESSION); let h31 = new Terminate(this.runTimeLaunch.localTimeMs, this.currPageInfo?.pageTitle, this.currPageInfo?.pageKey); this.sdkContext.eventProcessor() .receive(h31); this.lastTerminate = h31; } else { this.sdkContext.appLogLogger().warn("Create terminate failed, because no launch", LoggerTag.SESSION); } } } Session.pluginName = 'plugin:session'; function j30(e31, f31) { let g31 = { onApplicationForeground() { if (e31.lastTerminate) { f31.appLogLogger().info("ApplicationStateChangeCallback onApplicationForeground", LoggerTag.SESSION); e31.launch(); } else { f31.appLogLogger().info("ApplicationStateChangeCallback onApplicationForeground, pass launch", LoggerTag.SESSION); } }, onApplicationBackground() { f31.appLogLogger().info("ApplicationStateChangeCallback onApplicationBackground", LoggerTag.SESSION); e31.terminate(); e31.resumeFromBackground = true; } }; f31.context().getApplicationContext().on("applicationStateChange", g31); } function k30(m30, n30) { let o30 = { onWindowStageCreate(c31, d31) { n30.appLogLogger() .debug("AbilityLifecycleCallback onWindowStageCreate windowStage: {}", LoggerTag.SESSION, d31); }, onWindowStageActive(a31, b31) { n30.appLogLogger() .debug("AbilityLifecycleCallback onWindowStageActive windowStage: {}", LoggerTag.SESSION, b31); }, onWindowStageInactive(y30, z30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onWindowStageInactive windowStage: {}", LoggerTag.SESSION, z30); }, onWindowStageDestroy(w30, x30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onWindowStageDestroy windowStage: {}", LoggerTag.SESSION, x30); }, onAbilityCreate(v30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onAbilityCreate ability: {}", LoggerTag.SESSION, v30.context.abilityInfo.name); m30.updateUIAbilityInfo(v30); }, onAbilityDestroy(u30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onAbilityDestroy ability: {}", LoggerTag.SESSION, u30.context.abilityInfo.name); }, onAbilityForeground(t30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onAbilityForeground ability: {}", LoggerTag.SESSION, t30.context.abilityInfo.name); m30.updateUIAbilityInfo(t30); }, onAbilityBackground(s30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onAbilityBackground ability: {}", LoggerTag.SESSION, s30.context.abilityInfo.name); }, onAbilityContinue(r30) { n30.appLogLogger() .debug("AbilityLifecycleCallback onAbilityContinue ability: {}", LoggerTag.SESSION, r30.context.abilityInfo.name); } }; let p30 = n30.context().getApplicationContext(); let q30 = p30.on('abilityLifecycle', o30); n30.appLogLogger().debug("registerAbilityLifecycleCallback lifecycleId: {}", LoggerTag.SESSION, q30); } 