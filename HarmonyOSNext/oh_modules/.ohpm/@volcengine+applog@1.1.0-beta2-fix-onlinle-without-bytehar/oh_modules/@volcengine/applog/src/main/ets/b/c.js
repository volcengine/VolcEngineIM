import Topic from "./k/l"; import { SDKContext } from "./d/f1"; import { AppLogHelper, calcInstanceKey } from "./g1"; import GlobalLogger from "./h1/i1"; import LoggerTag from "./h1/j1"; import { isEmpty } from "./k1/l1"; import { registerSDKInnerTopicListener } from "./k1/m1"; import AppLogLogger from "./h1/n1"; import { KEY_CUSTOM } from "./o1/p1/q1"; import { mapToRecord, recordToMap } from "./k1/r1"; import Profile from "../n/z/a1"; import ABTest from "../n/p/q"; import { createEvent } from "./h/s1"; import User from "../n/d1/e1"; import BuildProfile from "../../../../a"; import Simulate from "../n/b1/c1"; import Encrypt from "../n/x/y"; import Bridge from "../n/r/s"; import CrashEvent from "../n/h/v"; class AppLog { constructor() { this.sdkContext = null; this.started = false; } init(context, initConfig) { if (isEmpty(initConfig.getAppId())) { throw Error("AppLog Init failed. App id must not be empty!"); } let instanceKey = calcInstanceKey(initConfig.getAppId(), initConfig.getMultipleInstanceTag()); if (AppLogHelper.containsInstance(instanceKey)) { GlobalLogger.globalWarn(`This AppLog instance: ${instanceKey} has initialized already`, LoggerTag.INIT); return; } let sdkLogger = new AppLogLogger(initConfig.isLogEnabled(), instanceKey, initConfig.getLogger()); sdkLogger.info("AppLog sdk init begin", LoggerTag.INIT); sdkLogger.info("AppLog sdk init build profile print, sdkVerionName: {}, platform: {}, isSsidMaintain: {}", LoggerTag.INIT, BuildProfile.sdkVersionName, BuildProfile.sdkPlatform, BuildProfile.isSDKSsidMaintain); this.sdkContext = new SDKContext(context, initConfig, instanceKey, sdkLogger); AppLogHelper.putInstance(this.sdkContext.sdkInstanceKey(), this); registerSDKInnerTopicListener(this.sdkContext); this.sdkContext.dispatcher().emit(Topic.SDKInit, { "sdk_version": BuildProfile.sdkVersionName, "init_config": initConfig }); this.sdkContext.appLogLogger().info("AppLog sdk init end", LoggerTag.INIT); } start() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call start before please AppLog init first.", LoggerTag.INIT); return; } if (this.started) { return; } this.started = true; this.sdkContext.dispatcher().emit(Topic.SDKStart); this.sdkContext.appLogLogger().info("AppLog start", LoggerTag.INIT); } getSdkContext() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call sdkContext before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext; } topicReceiver() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call topicReceive before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.dispatcher(); } setHeaderInfo(key, value) { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call setHeaderInfo before please AppLog init first.", LoggerTag.INIT); return; } let custom = this.sdkContext.headerManager().getValue(KEY_CUSTOM, {}); custom[key] = value; return this.sdkContext.headerManager().updateHeader(KEY_CUSTOM, custom); } removeHeaderInfo(key) { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call removeHeaderInfo before please AppLog init first.", LoggerTag.INIT); return; } let custom = this.sdkContext.headerManager().getValue(KEY_CUSTOM, {}); let map = recordToMap(custom); map.delete(key); return this.sdkContext.headerManager().updateHeader(KEY_CUSTOM, mapToRecord(map)); } setUriRuntime(uriConfig) { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call setUriRuntime before please AppLog init first.", LoggerTag.INIT); return; } if (uriConfig) { this.sdkContext.runtimeUriConfig = uriConfig; this.sdkContext.appLogLogger().debug("Update runtime uri config to {}", LoggerTag.RUNTIME, uriConfig); this.sdkContext.dispatcher().emit(Topic.UriRunTimeChange); } } event(eventName, params) { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call event before please AppLog init first.", LoggerTag.INIT); return; } if (isEmpty(eventName)) { this.sdkContext.appLogLogger().warn("Event name is empty, can't save.", LoggerTag.EVENT); return; } let eventParam = params ?? {}; this.sdkContext.appLogLogger() .debug("Receive event: {}, params: {}", LoggerTag.EVENT, eventName, eventParam); this.sdkContext.eventProcessor().receive(createEvent(eventName, eventParam)); } user() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call user before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter().getPlugin(User.pluginName); } encrypt() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call encrypt before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter().getPlugin(Encrypt.pluginName); } profile() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call profile before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter() .getOrRegisterPlugin(Profile.pluginName, (sdkContext) => { return new Profile(sdkContext); }); } abTest() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call abTest before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter() .getOrRegisterPlugin(ABTest.pluginName, (sdkContext) => { return new ABTest(sdkContext); }); } simulate() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call simulate before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter() .getOrRegisterPlugin(Simulate.pluginName, (sdkContext) => { return new Simulate(sdkContext); }); } bridge() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call bridge before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter() .getOrRegisterPlugin(Bridge.pluginName, (sdkContext) => { return new Bridge(sdkContext); }); } crash() { if (this.sdkContext == null) { GlobalLogger.globalWarn("Call crash before please AppLog init first.", LoggerTag.INIT); return null; } return this.sdkContext.pluginCenter() .getOrRegisterPlugin(CrashEvent.pluginName, (sdkContext) => { return new CrashEvent(sdkContext); }); } } export default AppLog; 