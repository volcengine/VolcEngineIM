import systemDateTime from "@ohos.systemDateTime"; import q4 from '@ohos.i18n'; export var TimeUnit; (function (TimeUnit) { TimeUnit[TimeUnit["DAY"] = 0] = "DAY"; TimeUnit[TimeUnit["HOUR"] = 1] = "HOUR"; TimeUnit[TimeUnit["MINUTE"] = 2] = "MINUTE"; TimeUnit[TimeUnit["SECOND"] = 3] = "SECOND"; TimeUnit[TimeUnit["MILLISECOND"] = 4] = "MILLISECOND"; })(TimeUnit || (TimeUnit = {})); export function currentTimeMillis() { return systemDateTime.getTime(false); } export function formatTimestamp(r19) { const s19 = new Date(r19); const t19 = s19.getFullYear(); const u19 = (s19.getMonth() + 1).toString().padStart(2, '0'); const v19 = s19.getDate().toString().padStart(2, '0'); const w19 = s19.getHours().toString().padStart(2, '0'); const x19 = s19.getMinutes().toString().padStart(2, '0'); const y19 = s19.getSeconds().toString().padStart(2, '0'); const z19 = `${t19}-${u19}-${v19} ${w19}:${x19}:${y19}`; return z19; } export function isTimeUp(n19, o19, p19) { let q19 = 0; switch (p19) { case TimeUnit.MILLISECOND: q19 = o19; break; case TimeUnit.SECOND: q19 = o19 * 1000; break; case TimeUnit.MINUTE: q19 = o19 * 1000 * 60; break; case TimeUnit.HOUR: q19 = o19 * 1000 * 60 * 60; break; case TimeUnit.DAY: q19 = o19 * 1000 * 60 * 60 * 24; break; } if (currentTimeMillis() - n19 > q19) { return true; } else { return false; } } export function calcTimeDifference(j19, k19, l19) { let m19 = 0; switch (l19) { case TimeUnit.MILLISECOND: m19 = k19; break; case TimeUnit.SECOND: m19 = k19 * 1000; break; case TimeUnit.MINUTE: m19 = k19 * 1000 * 60; break; case TimeUnit.HOUR: m19 = k19 * 1000 * 60 * 60; break; case TimeUnit.DAY: m19 = k19 * 1000 * 60 * 60 * 24; break; } return m19 + j19 - currentTimeMillis(); } export function getTimeZoneName() { return q4.getTimeZone().getID(); } export function getTimeZoneOffset() { return q4.getTimeZone().getRawOffset() / 1000; } export function getTimeZone() { let h19 = q4.getTimeZone(); let i19 = h19.getRawOffset() / (3600 * 1000); if (i19 < -12) { i19 = -12; } if (i19 > 12) { i19 = 12; } return i19; } 