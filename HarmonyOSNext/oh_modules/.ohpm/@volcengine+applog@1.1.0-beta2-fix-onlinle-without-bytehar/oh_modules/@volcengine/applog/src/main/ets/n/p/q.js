import Topic from "../../b/k/l"; import { KEY_AB_SDK_VERSION, KEY_DEVICE_INFO_FROM, KEY_DID_FROM_REMOTE } from "../../b/o1/p1/q1"; import LoggerTag from "../../b/h1/j1"; import BasePlugin from "../o"; import ABTestWorker from "./h2"; import { createEvent } from "../../b/h/s1"; import { isEmpty } from "../../b/k1/l1"; const s20 = "abtest_exposure"; class ABTest extends BasePlugin { constructor(h21) { super(h21); this.abTestConfig = {}; this.abTestWorker = null; this.abTestEnabled = false; this.hasInit = false; let i21 = this.sdkContext.kvStore().get(KEY_AB_SDK_VERSION, ""); if (i21) { this.exposedVids = new Set(i21.split(",")); } else { this.exposedVids = new Set(); } } enablePlugin() { this.abTestEnabled = true; this.sdkContext.dispatcher().stickyOn(Topic.SDKStart, () => { this.applyAB(); }); super.enablePlugin(); } applyAB() { if (this.isABTestEnabled() && !this.hasInit) { this.hasInit = true; this.init(); this.registerUserChangeListener(); this.registerDidRequestListener(); } else { this.sdkContext.appLogLogger() .debug("ABTest jump apply, abTestEnabled:{}, hasInit: {}", LoggerTag.ABTEST, this.isABTestEnabled(), this.hasInit); } } disablePlugin() { this.abTestEnabled = false; if (this.abTestWorker) { this.sdkContext.workEngine().removeWorker(this.abTestWorker); } super.disablePlugin(); } isABTestEnabled() { return this.abTestEnabled; } pluginName() { return ABTest.pluginName; } registerUserChangeListener() { this.sdkContext.dispatcher().stickyOn(Topic.UUIDChangeAfter, (f21) => { let g21 = isEmpty(f21["old_uuid"]); if (!g21) { this.exposedVids.clear(); this.sdkContext.headerManager().updateHeader(KEY_AB_SDK_VERSION, this.getAbSdkVersion(), true); this.sdkContext.appLogLogger() .debug("User change clear ab cache", LoggerTag.ABTEST); } else { this.sdkContext.appLogLogger() .debug("AnonymousUser change to realNameUser don't clear ab cache", LoggerTag.ABTEST); } }); } registerDidRequestListener() { this.sdkContext.dispatcher().stickyOn(Topic.DidReady, (e21) => { if (e21[KEY_DEVICE_INFO_FROM] === KEY_DID_FROM_REMOTE) { this.sdkContext.appLogLogger() .debug("Request did return, need request abtest config", LoggerTag.ABTEST); this.abTestWorker?.getAbTestConfig(); } }); } init() { this.sdkContext.appLogLogger().debug("AB plugin start", LoggerTag.ABTEST); this.abTestWorker = new ABTestWorker(this.sdkContext); this.sdkContext.workEngine().addWorker(this.abTestWorker); this.sdkContext.dispatcher().on(Topic.ABTestConfigReady, (d21) => { this.sdkContext.appLogLogger() .debug("Remote abTest config get: {}", LoggerTag.ABTEST, d21); this.setABTestConfig(d21); }); } getAbSdkVersion() { if (this.isABTestEnabled()) { return Array.from(this.exposedVids).join(","); } else { this.sdkContext.appLogLogger().debug("Unopened ABTest, getAbSdkVersion return empty", LoggerTag.ABTEST); return ""; } } getAbConfig(b21, c21) { if (this.isABTestEnabled()) { if (this.abTestConfig[b21]) { this.addExposedVid(this.abTestConfig[b21].vid); this.sendABExposure(this.abTestConfig[b21].vid); return this.abTestConfig[b21].val; } else { return c21; } } else { this.sdkContext.appLogLogger() .debug(`Unopened ABTest, getAbConfig return defaultValue: ${c21}`, LoggerTag.ABTEST); return c21; } } addExposedVid(z20) { let a21 = !this.exposedVids.has(z20); this.sdkContext.appLogLogger() .debug("AddExposedVid new vid: {} into {}", LoggerTag.ABTEST, z20, this.exposedVids); this.exposedVids.add(z20); this.sdkContext.headerManager().updateHeader(KEY_AB_SDK_VERSION, this.getAbSdkVersion(), true); if (a21) { this.sdkContext.dispatcher().emit(Topic.ABTestVidChanged, { "new_vid": z20, "vids": this.getAbSdkVersion() }); } } sendABExposure(y20) { this.sdkContext.eventProcessor() .receive(createEvent(s20, { "ab_sdk_version": y20 })); } getAllAbTestConfigs() { if (this.isABTestEnabled()) { return this.abTestConfig; } else { this.sdkContext.appLogLogger() .debug("Unopened ABTest, getAllAbTestConfigs return empty", LoggerTag.ABTEST); return {}; } } setABTestConfig(x20) { if (x20) { this.abTestConfig = x20; this.updateVids(x20); } } updateVids(t20) { let u20 = new Set(); for (let w20 of Object.entries(t20)) { if (w20[1]) { u20.add(w20[1].vid); } } this.sdkContext.appLogLogger() .debug("UpdateVids serviceVids: {}", LoggerTag.ABTEST, u20); this.sdkContext.appLogLogger() .debug("UpdateVids before exposedVids: {}", LoggerTag.ABTEST, this.exposedVids); for (let v20 of this.exposedVids) { if (!u20.has(v20)) { this.exposedVids.delete(v20); } } this.sdkContext.headerManager().updateHeader(KEY_AB_SDK_VERSION, this.getAbSdkVersion(), true); this.sdkContext.appLogLogger() .debug("UpdateVids after exposedVids: {}", LoggerTag.ABTEST, this.exposedVids); } } ABTest.pluginName = 'plugin:ABTest'; export default ABTest; 