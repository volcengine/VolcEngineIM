import Session from "../n/n2/o2"; import LoggerTag from "./h1/j1"; import User from "../n/d1/e1"; import Encrypt from "../n/x/y"; import Topic from "./k/l"; class PluginCenter { constructor(p12) { this.pluginInstances = new Map(); this.sdkContext = p12; this.preRegisterPlugin(p12); } preRegisterPlugin(o12) { this.registerAndEnablePlugin(new User(o12)); this.registerAndEnablePlugin(new Encrypt(o12)); this.registerAndEnablePlugin(new Session(o12)); } registerPlugin(l12, m12) { const n12 = m12 ?? l12.pluginName(); this.pluginInstances.set(n12, l12); this.sdkContext.appLogLogger().debug("PluginCenter register plugin: {}", LoggerTag.PLUGIN, n12); this.sdkContext.dispatcher().emit(Topic.PluginRegister, { "plugin_name": n12 }); } registerAndEnablePlugin(j12, k12) { this.registerPlugin(j12, k12); this.sdkContext.appLogLogger() .debug("PluginCenter enable plugin: {}", LoggerTag.PLUGIN, k12 ?? j12.pluginName()); j12.enablePlugin(); } unregisterPlugin(h12) { if (!this.pluginInstances.has(h12)) { return false; } let i12 = this.pluginInstances.get(h12); this.pluginInstances.delete(h12); i12?.disablePlugin(); this.sdkContext.appLogLogger().debug("PluginCenter unregister and disable plugin: {}", LoggerTag.PLUGIN, h12); this.sdkContext.dispatcher().emit(Topic.PluginUnregister, { "plugin_name": h12 }); return true; } getPlugin(f12) { if (!this.pluginInstances.has(f12)) { this.sdkContext.appLogLogger() .warn("PluginCenter getPlugin failed, not register {}", LoggerTag.PLUGIN, f12); return null; } let g12 = this.pluginInstances.get(f12); return g12 == null ? null : g12; } getOrRegisterPlugin(c12, d12) { let e12 = this.getPlugin(c12); if (!e12) { this.sdkContext.appLogLogger() .debug("PluginCenter not found {}, need lazy register", LoggerTag.PLUGIN, c12); e12 = d12(this.sdkContext); this.registerPlugin(e12, c12); } return e12; } } export default PluginCenter; 