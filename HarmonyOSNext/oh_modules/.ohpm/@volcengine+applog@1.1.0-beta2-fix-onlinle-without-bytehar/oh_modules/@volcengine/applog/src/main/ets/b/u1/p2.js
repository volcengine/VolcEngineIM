import connection from "@ohos.net.connection"; import http from "@ohos.net.http"; import radio from "@ohos.telephony.radio"; import { getDefaultSlotId } from "../k1/w2"; import LoggerTag from "../h1/j1"; import Topic from "../k/l"; export function isNetworkAvailableFast() { let q11 = connection.getDefaultNetSync(); return q11.netId > 0; } export async function getNetworkType(m11) { let n11 = connection.getDefaultNetSync(); try { let p11 = connection.getNetCapabilitiesSync(n11); m11.debug("GetNetworkType capability {}", LoggerTag.HEADER, p11); switch (p11.bearerTypes[0]) { case connection.NetBearType.BEARER_CELLULAR: return await getCellularType(m11); case connection.NetBearType.BEARER_WIFI: return "wifi"; case connection.NetBearType.BEARER_ETHERNET: return "wifi"; } } catch (o11) { m11.error("GetNetworkType error", o11, LoggerTag.HEADER); } return "unknown"; } export async function getCellularType(j11) { if (canIUse("SystemCapability.Telephony.CoreService")) { let k11 = await getDefaultSlotId(j11); if (k11 != -1) { let l11 = await radio.getRadioTech(k11); return parseNetworkType(l11.psRadioTech, j11); } j11.debug("Not Find Default SlotId", LoggerTag.HEADER); return "unknown"; } j11.warn("Current System can‘t use SystemCapability.Telephony.CoreService", LoggerTag.HEADER); return "unknown"; } export function parseNetworkType(h11, i11) { if (canIUse("SystemCapability.Telephony.CoreService")) { switch (h11) { case radio.RadioTechnology.RADIO_TECHNOLOGY_GSM: return "2G"; case radio.RadioTechnology.RADIO_TECHNOLOGY_WCDMA: return "3G"; case radio.RadioTechnology.RADIO_TECHNOLOGY_LTE: return "4G"; case radio.RadioTechnology.RADIO_TECHNOLOGY_NR: return "5G"; case radio.RadioTechnology.RADIO_TECHNOLOGY_UNKNOWN: default: i11.debug("Can't parse NetworkType: {}", LoggerTag.HEADER, h11); return "unknown"; } } else { i11.warn("Current System can‘t use SystemCapability.Telephony.CoreService", LoggerTag.HEADER); return "unknown"; } } export function registerNetworkStateListener(c11) { let d11 = connection.createNetConnection(); c11.appLogLogger().debug("AppLog registerNetworkStateListener", LoggerTag.NETWORK); d11.register((e11) => { if (e11) { c11.appLogLogger().error("Register net failed", e11, LoggerTag.NETWORK); } else { d11.on('netAvailable', (g11) => { c11.appLogLogger().debug("AppLog netAvailable {}", LoggerTag.NETWORK, g11); c11.dispatcher().emit(Topic.NetworkAvailable); }); d11.on('netLost', (f11) => { c11.appLogLogger().debug("AppLog netLost", LoggerTag.NETWORK, f11); c11.dispatcher().emit(Topic.NetworkLost); }); d11.on('netUnavailable', () => { c11.appLogLogger().debug("AppLog netUnavailable", LoggerTag.NETWORK); c11.dispatcher().emit(Topic.NetworkUnavailable); }); } }); } export async function getEventNetworkType(a11) { let b11 = await getNetworkType(a11); if (b11 === "wifi") { return 4; } else if (b11 === "2g") { return 2; } else if (b11 === "3g") { return 3; } else if (b11 === "4g") { return 5; } else if (b11 === "5g") { return 6; } else { return -1; } } export function checkIfJamMsg(z10) { return z10.httpStatusCode >= http.ResponseCode.INTERNAL_ERROR && z10.httpStatusCode < 600; } const t10 = "magic_tag"; const u10 = "ss_app_log"; const o2 = "message"; const p2 = "success"; export function checkResponseOk(v10) { let w10 = JSON.parse(v10.result); let x10 = w10[t10]; let y10 = w10[o2]; return u10 == x10 && y10 == p2; } 