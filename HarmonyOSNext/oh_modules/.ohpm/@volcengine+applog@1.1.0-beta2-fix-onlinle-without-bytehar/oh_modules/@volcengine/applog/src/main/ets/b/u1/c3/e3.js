import pako from 'pako'; import Encrypt, { DEFAULT_CONTENT_TYPE } from "../../../n/x/y"; import LoggerTag from "../../h1/j1"; const r9 = "content-type"; export class CompressAndEncryptInterceptor { async intercept(s9) { let t9 = s9.getRequest(); s9.getSdkContext() .appLogLogger() .debug("CompressAndEncryptInterceptor intercept, before deal request: {}", LoggerTag.NETWORK, t9); let u9 = s9.getSdkContext() .pluginCenter() .getOrRegisterPlugin(Encrypt.pluginName, (y9) => { return new Encrypt(y9); }); if (u9.isUseEncrypt) { try { let w9 = pako.gzip(t9.body); if (w9) { let x9 = await u9.encrypt(w9.buffer.slice(0), w9.byteLength); t9.body = x9; t9.headers[r9] = u9.contentType(); s9.getSdkContext() .appLogLogger() .debug("CompressAndEncryptInterceptor intercept, isPluginEnabled true and gzip & encrypt", LoggerTag.NETWORK, t9); } else { t9.headers[r9] = DEFAULT_CONTENT_TYPE; s9.getSdkContext() .appLogLogger() .debug("CompressAndEncryptInterceptor intercept, isPluginEnabled true, but gzip failed, not encrypt", LoggerTag.NETWORK, t9); } } catch (v9) { s9.getSdkContext() .appLogLogger() .error("CompressAndEncryptInterceptor encrypt failed, switch to disable encrypt", v9, LoggerTag.NETWORK); } } else { t9.headers[r9] = DEFAULT_CONTENT_TYPE; s9.getSdkContext() .appLogLogger() .debug("CompressAndEncryptInterceptor intercept, isPluginEnabled false, not encrypt", LoggerTag.NETWORK, t9); } s9.getSdkContext() .appLogLogger() .debug("CompressAndEncryptInterceptor intercept, after deal request: {}", LoggerTag.NETWORK, t9); return await s9.proceed(t9); } } 