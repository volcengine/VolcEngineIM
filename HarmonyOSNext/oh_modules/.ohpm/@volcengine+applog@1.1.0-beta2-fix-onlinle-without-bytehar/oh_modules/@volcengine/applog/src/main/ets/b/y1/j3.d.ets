import relationalStore from '@ohos.data.relationalStore'; import { Callback } from '@ohos.base'; import { ISDKContext } from "../d/f1"; import { ValuesBucket } from '@kit.ArkData'; export interface IDbStore { getDbStore(): relationalStore.RdbStore | null; insert(values: relationalStore.ValuesBucket): void; batchInsert(values: relationalStore.ValuesBucket[]): Promise<number | undefined>; query(predicates: relationalStore.RdbPredicates): Promise<relationalStore.ResultSet | undefined>; update(values: ValuesBucket, predicates: relationalStore.RdbPredicates): Promise<number | undefined>; delete(predicates: relationalStore.RdbPredicates): Promise<number | undefined>; listenerDataChange(callback: Callback<string[]>): void; transaction<T>(task: () => Promise<T>): void; } export declare class DefaultDbStore implements IDbStore { sdkContext: ISDKContext; store: relationalStore.RdbStore | null; tableName: string; constructor(k13: ISDKContext); getDbConfig(i13: string): relationalStore.StoreConfig; createOrUpdateEventTable(g13: relationalStore.RdbStore): void; notifyEventDbReady(): void; listenerDataChange(f13: Callback<string[]>): void; delete(e13: relationalStore.RdbPredicates): Promise<number>; query(d13: relationalStore.RdbPredicates): Promise<relationalStore.ResultSet | undefined>; update(b13: ValuesBucket, c13: relationalStore.RdbPredicates): Promise<number>; transaction<k65>(y12: () => Promise<k65>): Promise<k65>; insert(v12: relationalStore.ValuesBucket): void; batchInsert(s12: relationalStore.ValuesBucket[]): Promise<number | undefined>; getDbStore(): relationalStore.RdbStore | null; } 