import Topic from "../k/l"; import LoggerTag from "../h1/j1"; export function registerSDKInnerTopicListener(a17) { a17.dispatcher().on(Topic.SDKInit, (s17) => { a17.appLogLogger().info(`AppLog init: {}`, LoggerTag.INNER, s17); }); a17.dispatcher().on(Topic.SDKStart, () => { a17.appLogLogger().info(`AppLog start`, LoggerTag.INNER); }); a17.dispatcher().on(Topic.EventDbReady, () => { a17.appLogLogger() .info("Event db ready", LoggerTag.INNER); }); a17.dispatcher().on(Topic.HeaderReady, () => { a17.appLogLogger() .info("AppLog header ready: {}", LoggerTag.INNER, a17.headerManager().getHeader()); }); a17.dispatcher().on(Topic.DidReady, (r17) => { a17.appLogLogger().info("AppLog did ready: {}", LoggerTag.INNER, r17); }); a17.dispatcher().on(Topic.EventReceive, (q17) => { a17.appLogLogger() .info("Event receive: {}", LoggerTag.INNER, q17); }); a17.dispatcher().on(Topic.EventProcess, (p17) => { a17.appLogLogger() .info("Event process: {}", LoggerTag.INNER, p17); }); a17.dispatcher().on(Topic.EventStore, (o17) => { a17.appLogLogger() .info("Event store: {}", LoggerTag.INNER, o17); }); a17.dispatcher().on(Topic.EventUpLoad, (n17) => { a17.appLogLogger() .info("Event upload finish: {}", LoggerTag.INNER, n17); }); a17.dispatcher().on(Topic.UUIDChangeBefore, (m17) => { a17.appLogLogger().info("AppLog uuid change before: {}", LoggerTag.INNER, m17); }); a17.dispatcher().on(Topic.UUIDChangeAfter, (l17) => { a17.appLogLogger().info("AppLog uuid change after: {}", LoggerTag.INNER, l17); }); a17.dispatcher().on(Topic.SSIDChange, (k17) => { a17.appLogLogger().info("AppLog ssid change: {}", LoggerTag.INNER, k17); }); a17.dispatcher().on(Topic.ABTestConfigReady, (j17) => { a17.appLogLogger().info("AppLog ABTest config ready: {}", LoggerTag.INNER, j17); }); a17.dispatcher().on(Topic.ABTestVidChanged, (i17) => { a17.appLogLogger().info("AppLog ABTest vids changed: {}", LoggerTag.INNER, i17); }); a17.dispatcher().on(Topic.RemoteConfigGet, (h17) => { a17.appLogLogger().info("AppLog remote config get: {}", LoggerTag.INNER, h17); }); a17.dispatcher().on(Topic.BlockListUpdate, (g17) => { a17.appLogLogger().info("AppLog block list update: {}", LoggerTag.INNER, g17); }); a17.dispatcher().on(Topic.NetworkAvailable, () => { a17.appLogLogger().info("AppLog netAvailable", LoggerTag.INNER); }); a17.dispatcher().on(Topic.NetworkUnavailable, () => { a17.appLogLogger().info("AppLog netUnavailable", LoggerTag.INNER); }); a17.dispatcher().on(Topic.NetworkLost, () => { a17.appLogLogger().info("AppLog netLost", LoggerTag.INNER); }); a17.dispatcher().on(Topic.NetworkRequestStart, (f17) => { a17.appLogLogger().info("AppLog request state: {}", LoggerTag.INNER, f17); }); a17.dispatcher().on(Topic.NetworkRequestEnd, (e17) => { a17.appLogLogger().info("AppLog request end: {}", LoggerTag.INNER, e17); }); a17.dispatcher().on(Topic.PluginRegister, (d17) => { a17.appLogLogger().info("AppLog plugin register: {}", LoggerTag.INNER, d17); }); a17.dispatcher().on(Topic.PluginUnregister, (c17) => { a17.appLogLogger().info("AppLog plugin unregister: {}", LoggerTag.INNER, c17); }); a17.dispatcher().on(Topic.PluginStateChange, (b17) => { a17.appLogLogger().info("AppLog plugin state change: {}", LoggerTag.INNER, b17); }); a17.dispatcher().on(Topic.UriRunTimeChange, () => { a17.appLogLogger().info("AppLog uri runtime change, new uri: {}", LoggerTag.INNER, a17.runtimeUriConfig); }); } 