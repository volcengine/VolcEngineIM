import hilog from '@ohos.hilog'; export class SM2_SEQUENCE { constructor() { this._C1x = ""; this._C1y = ""; this._C2 = ""; this._C3 = ""; } set C1x(f27) { this._C1x = f27; } get C1x() { return this._C1x; } set C1y(e27) { this._C1y = e27; } get C1y() { return this._C1y; } set C2(d27) { this._C2 = d27; } get C2() { return this._C2; } set C3(c27) { this._C3 = c27; } get C3() { return this._C3; } toString() { return JSON.stringify(this); } } export class ASN1Util { } ASN1Util.BOOLEAN = "01"; ASN1Util.INTEGER = "02"; ASN1Util.BIT_STRING = "03"; ASN1Util.OCTET_STRING = "04"; ASN1Util.NULL = "05"; ASN1Util.REAL = "09"; ASN1Util.ENUMERATED = "0a"; ASN1Util.SEQUENCE = "30"; ASN1Util.SET = "31"; export class SM2_Ciphertext { i2d_SM2_Ciphertext(t26) { let u26 = new SM2_SEQUENCE(); u26.C1x = t26.slice(0, 64); t26 = t26.slice(64, t26.length); u26.C1y = t26.slice(0, 64); t26 = t26.slice(64, t26.length); u26.C3 = t26.slice(0, 64); t26 = t26.slice(64, t26.length); u26.C2 = t26; let v26 = (Number.parseInt("0x" + u26.C1x.slice(0, 2)) > 127) ? "022100" : "0220"; let w26 = (Number.parseInt("0x" + u26.C1y.slice(0, 2)) > 127) ? "022100" : "0220"; let x26 = "0420"; let y26 = "04" + this.genLenHex(u26.C2); let z26 = v26 + u26.C1x + w26 + u26.C1y + x26 + u26.C3 + y26 + u26.C2; let a27 = this.genLenHex(z26); let b27 = "30" + a27 + z26; return b27; } d2i_SM2_Ciphertext(n26) { let o26 = n26; if (!o26.startsWith(ASN1Util.SEQUENCE)) { this.ciphertextErr(); } o26 = o26.slice(ASN1Util.SEQUENCE.length, o26.length); let p26 = this.getLenHex(o26); o26 = o26.slice(p26.length, o26.length); let q26 = this.lenHex2number(p26); if (q26 != o26.length / 2) { this.ciphertextErr(); } let r26 = new SM2_SEQUENCE(); o26 = this.readC1(r26, o26); o26 = this.readC3(r26, o26); o26 = this.readC2(r26, o26); let s26 = "04" + r26.C1x + r26.C1y + r26.C3 + r26.C2; return s26; } genLenHex(j26) { let k26 = j26.length / 2; let l26 = ("00" + k26.toString(16)).slice(-2); if (k26 < 0x80) { return l26; } let m26 = l26.length / 2; return (m26 | 0x80).toString(16) + l26; } getLenHex(g26) { let h26 = Number.parseInt("0x" + g26.slice(0, 2)); let i26 = h26 > 127 ? h26 - 0x80 + 1 : 1; return g26.slice(0, i26 * 2); } lenHex2number(f26) { if (f26.length == 2) { return Number.parseInt("0x" + f26); } return Number.parseInt("0x" + f26.slice(2, f26.length)); } ciphertextErr() { hilog.error(0, "d2i_SM2_Ciphertext", "密文格式错误"); throw new Error("SM2 ciphertext error!"); } readC1(b26, c26) { let d26 = []; for (let e26 = 0; e26 < 2; e26++) { if (c26.startsWith("0220")) { d26[e26] = c26.slice(4, 68); c26 = c26.slice(68, c26.length); } else if (c26.startsWith("022100")) { d26[e26] = c26.slice(6, 70); c26 = c26.slice(70, c26.length); } else { this.ciphertextErr(); } } b26.C1x = d26[0]; b26.C1y = d26[1]; return c26; } readC2(y25, z25) { if (z25.startsWith(ASN1Util.OCTET_STRING)) { z25 = z25.slice(ASN1Util.OCTET_STRING.length, z25.length); let a26 = this.getLenHex(z25); z25 = z25.slice(a26.length, z25.length); if (this.lenHex2number(a26) != z25.length / 2) { this.ciphertextErr(); } y25.C2 = z25; } else { this.ciphertextErr(); } return z25; } readC3(w25, x25) { if (x25.startsWith("0420")) { w25.C3 = x25.slice(4, 68); x25 = x25.slice(68, x25.length); } else { this.ciphertextErr(); } return x25; } } 