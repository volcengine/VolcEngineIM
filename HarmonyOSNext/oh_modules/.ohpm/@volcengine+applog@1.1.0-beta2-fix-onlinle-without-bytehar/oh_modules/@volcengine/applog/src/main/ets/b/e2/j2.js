import { BaseWorker, RETRY_SAME } from "../a2/g2"; import LoggerTag from "../h1/j1"; import { KEY_DEVICE_PLATFORM } from "../o1/p1/q1"; import { HARMONY_OS } from "../o1/p1/w1"; import { ABTEST_FETCH_INTERVAL, BATCH_EVENT_INTERVAL, BAV_AB_CONFIG, BAV_LOG_COLLECT, CONFIG, REAL_TIME_EVENTS } from "./f2"; import Topic from "../k/l"; import { INTERVAL_UPDATE_AB } from "../../n/p/h2"; import { EVENT_INTERVAL_DEFAULT } from "../h/i2"; export default class SettingWorker extends BaseWorker { constructor(v) { super(v, LoggerTag.SETTING); this.workName = 'work:log_setting'; } getWorkName() { return this.workName; } getRequestUrl() { return this.sdkContext.runtimeUriConfig.getSettingUri().concat(`?${KEY_DEVICE_PLATFORM}=${HARMONY_OS}`); } parseResponse(s) { let t = JSON.parse(s.result); let u = { realtimeEvents: t[CONFIG]?.[REAL_TIME_EVENTS] ?? [], eventInterval: t[CONFIG]?.[BATCH_EVENT_INTERVAL] ?? EVENT_INTERVAL_DEFAULT / 1000, bavCollect: t[CONFIG]?.[BAV_LOG_COLLECT] ?? true, bavAbConfig: t[CONFIG]?.[BAV_AB_CONFIG] ?? true, abInterval: t[CONFIG]?.[ABTEST_FETCH_INTERVAL] ?? INTERVAL_UPDATE_AB / 1000 }; this.sdkContext.appLogLogger().debug("{} parseResponse, settingData: {}", LoggerTag.SETTING, this.getWorkName(), u); this.sdkContext.kvStore() .put(REAL_TIME_EVENTS, JSON.stringify(u.realtimeEvents)) .put(BATCH_EVENT_INTERVAL, u.eventInterval) .put(BAV_LOG_COLLECT, u.bavCollect) .put(BAV_AB_CONFIG, u.bavAbConfig) .put(ABTEST_FETCH_INTERVAL, u.abInterval); this.sdkContext.dispatcher().emit(Topic.RemoteConfigGet, { "config": u }); } getRetryIntervals() { return RETRY_SAME; } } 