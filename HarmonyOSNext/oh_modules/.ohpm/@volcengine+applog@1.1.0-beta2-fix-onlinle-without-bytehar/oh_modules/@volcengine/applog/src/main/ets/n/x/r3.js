import m16 from 'libapplogh.so'; import cryptoFramework from "@ohos.security.cryptoFramework"; import buffer from "@ohos.buffer"; import { SM2_Ciphertext } from "./s3"; class w24 { contentType() { return "application/octet-stream;tt-data=a"; } async encrypt(u25, v25) { return m16.ttEncrypt(u25, v25); } } export class GmSm2Encryptor { constructor(t25) { this.pubKeyStr = t25; } async encryptInner(o25) { let p25 = await this.convertStrToPubKey(this.pubKeyStr); let q25 = cryptoFramework.createCipher('SM2_256|SM3'); await q25.init(cryptoFramework.CryptoMode.ENCRYPT_MODE, p25, null); let r25 = await q25.doFinal(o25); let s25 = new SM2_Ciphertext().d2i_SM2_Ciphertext(this.uint8ArrayToHexStr(r25.data)); return buffer.from(s25, 'hex').buffer; } insertAtBeginning(l25, m25) { const n25 = new Uint8Array(l25.length + 1); n25.set([m25], 0); n25.set(l25, 1); return n25; } uint8ArrayToHexStr(h25) { let i25 = ''; for (let j25 = 0; j25 < h25.length; j25++) { let k25 = h25[j25].toString(16); k25 = k25.length === 1 ? '0' + k25 : k25; i25 += k25; } return i25; } async convertStrToPubKey(a25) { let b25 = a25.startsWith("04") ? a25.slice(2) : a25; let c25 = b25.slice(0, b25.length / 2); let d25 = b25.slice(b25.length / 2); let e25 = { x: BigInt("0x" + c25), y: BigInt("0x" + d25), }; let f25 = { params: cryptoFramework.ECCKeyUtil.genECCCommonParamsSpec('NID_sm2'), pk: e25, algName: "SM2", specType: cryptoFramework.AsyKeySpecType.PUBLIC_KEY_SPEC }; let g25 = cryptoFramework.createAsyKeyGeneratorBySpec(f25); return await g25.generatePubKey(); } contentType() { return "application/octet-stream;tt-data=gm_sm2"; } async encrypt(x24, y24) { let z24 = { data: new Uint8Array(x24) }; return await this.encryptInner(z24); } } export const Default = new w24(); 