import { KEY_EVENT, KEY_HEADER } from "../../b/o1/p1/q1"; import LoggerTag from "../../b/h1/j1"; import { isNetworkAvailableFast } from "../../b/u1/p2"; import { buildRequest } from "../../b/u1/s2"; import { mapToRecord } from "../../b/k1/r1"; import SimulateBaseWorker from "./z3"; import Topic from "../../b/k/l"; import EventType from "../../b/h/j"; import http from '@ohos.net.http'; import { EVENT } from "../../b/h/l2"; import { checkSimulateResponseIsOk } from "./a4"; const o31 = "/simulator/mobile/log"; const p31 = 1000; const q31 = [p31]; const r31 = "keep"; const s31 = 3; export default class RangersEventVerifyWorker extends SimulateBaseWorker { constructor(f32, g32, h32) { super(f32, LoggerTag.SIMULATE); this.workName = 'work:event_verify'; this.requestFailedCount = 0; this.isVerifyKeep = true; this.simulateUriData = g32; this.cookies = h32; this.monitorEventReceive(); } monitorEventReceive() { this.sdkContext.dispatcher().on(Topic.EventReceive, (c32) => { let d32 = c32["event_json"]; let e32 = c32["event_type"]; if (e32 == EventType.LAUNCH) { d32[EVENT] = "launch"; } else if (e32 == EventType.TERMINATE) { d32[EVENT] = "terminate"; } this.clearDelayTask(); this.requestWorker(d32); }); } getWorkName() { return this.workName; } getRequestUrl() { return this.simulateUriData.simulateUrlPrefix + o31; } requestWorker(x31) { if (!this.isVerifyKeep) { this.sdkContext.appLogLogger() .info("{} request is stop", this.workerLoggerTag, this.getWorkName()); return; } if (this.failCount > s31) { this.sdkContext.appLogLogger() .info("{} request too many failures: {}", this.workerLoggerTag, this.getWorkName(), this.failCount); return; } if (!isNetworkAvailableFast()) { this.sdkContext.appLogLogger() .warn("Not net availableï¼Œ{} not requested, try again later", this.workerLoggerTag, this.getWorkName()); return; } this.sdkContext.appLogLogger().info("{} start request", this.workerLoggerTag, this.getWorkName()); let y31 = this.cookies; this.sdkContext.appLogLogger() .info("{} start request type cookie {}", this.workerLoggerTag, this.getWorkName(), typeof this.cookies); let z31 = this.buildVerifyRequestBody(x31); this.sdkContext.networkClient() .execute(buildRequest(this.getRequestUrl(), z31, http.RequestMethod.POST, { "Cookie": y31 })) .then((b32) => { this.sdkContext.appLogLogger() .info("{} request return {}", this.workerLoggerTag, this.getWorkName(), b32); this.parseResponse(b32); }) .catch((a32) => { this.sdkContext.appLogLogger() .error("{} request returns exception", a32, this.workerLoggerTag, this.getWorkName()); this.requestWorkFailed(); }); } parseResponse(v31) { let w31 = JSON.parse(v31.result); this.isVerifyKeep = w31.data[r31] ?? false; if (checkSimulateResponseIsOk(w31)) { this.postDelayRequestWork(p31); } else { this.sdkContext.appLogLogger() .warn("{} request failed, because {}", LoggerTag.SIMULATE, this.getWorkName(), w31); this.requestWorkFailed(); } } buildVerifyRequestBody(t31) { let u31 = {}; u31[KEY_HEADER] = mapToRecord(this.sdkContext.headerManager().getHeader()); if (t31) { u31[KEY_EVENT] = [t31]; } return JSON.stringify(u31); } getRetryIntervals() { return q31; } } 