import LoggerTag from "../../b/h1/j1"; import Topic from "../../b/k/l"; import BasePlugin from "../o"; import JsBridge from "./o3"; import { createJsBridgeProxy } from "./p3"; class Bridge extends BasePlugin { constructor(s21) { super(s21); this.bridgeProxyInfo = null; } enablePlugin() { this.init(); super.enablePlugin(); } disablePlugin() { this.sdkContext.appLogLogger().debug("please call deleteJsBridge", LoggerTag.BRIDGE); } pluginName() { return Bridge.pluginName; } init() { this.sdkContext.dispatcher().on(Topic.DidReady, () => { this.process(); }); } process() { this.sdkContext.appLogLogger().info("Bridge plugin start", LoggerTag.BRIDGE); } registerJsBridge(q21) { try { q21.registerJavaScriptProxy(createJsBridgeProxy(this.sdkContext.sdkInstanceKey()), JsBridge.bridgeName, JsBridge.methodNames); q21.refresh(); } catch (r21) { } } deleteJsBridge(o21) { try { o21.deleteJavaScriptRegister(JsBridge.bridgeName); o21.refresh(); } catch (p21) { } } injectJsBridgeByJsProxy() { if (this.bridgeProxyInfo !== null) { return this.bridgeProxyInfo; } this.bridgeProxyInfo = { object: createJsBridgeProxy(this.sdkContext.sdkInstanceKey()), name: JsBridge.bridgeName, methodList: JsBridge.methodNames, }; return this.bridgeProxyInfo; } } Bridge.pluginName = 'plugin:bridge'; export default Bridge; 