import asset from "@ohos.security.asset"; import LoggerTag from "../h1/j1"; import { arrayToString, stringToArray } from "./l1"; import { generateUUID } from "./w2"; import { checkPermission } from "./l3"; const e15 = 24000002; const f15 = 24000008; export async function generateAppLogIdToAsset(p15) { let q15 = new Map(); let r15 = generateUUID(); if (canIUse("SystemCapability.Security.Asset")) { q15.set(asset.Tag.SECRET, stringToArray(r15)); q15.set(asset.Tag.ALIAS, stringToArray('AppLog_ID')); q15.set(asset.Tag.ACCESSIBILITY, asset.Accessibility.DEVICE_FIRST_UNLOCKED); q15.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray("Test")); q15.set(asset.Tag.IS_PERSISTENT, true); try { await asset.add(q15); p15.debug(`GenerateAppLogIdToAsset successfully.`, LoggerTag.HEADER); return r15; } catch (s15) { p15.error(`GenerateAppLogIdToAsset failed.`, s15, LoggerTag.HEADER); } } else { p15.warn(`Current System can‘t use SystemCapability.Security.Asset`, LoggerTag.HEADER); } return ""; } export async function queryAssetAppLogId(j15) { let k15 = new Map(); if (canIUse("SystemCapability.Security.Asset")) { if (await checkPermission(j15, "ohos.permission.STORE_PERSISTENT_DATA")) { k15.set(asset.Tag.ALIAS, stringToArray('AppLog_ID')); k15.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ALL); try { let n15 = await asset.query(k15); for (let o15 = 0; o15 < n15.length; o15++) { if (n15[o15].get(asset.Tag.ACCESSIBILITY)) { return arrayToString(n15[o15].get(asset.Tag.SECRET)); } } } catch (l15) { let m15 = l15; j15.error(`QueryAssetAppLogId add failed.`, l15, LoggerTag.HEADER); if (m15 && (m15.code == e15 || m15.code == f15)) { j15.debug(`Try generateAppLogIdToAsset.`, LoggerTag.HEADER); return await generateAppLogIdToAsset(j15); } } } else { j15.warn(`Not has ohos.permission.STORE_PERSISTENT_DATA permission`, LoggerTag.HEADER); } } else { j15.warn(`Current System can‘t use SystemCapability.Security.Asset`, LoggerTag.HEADER); } return ""; } async function d15(g15) { let h15 = new Map(); if (canIUse("SystemCapability.Security.Asset")) { h15.set(asset.Tag.ALIAS, stringToArray('AppLog_ID')); asset.remove(h15).then(() => { g15.debug(`Asset remove successfully.`, LoggerTag.HEADER); }).catch((i15) => { g15.error(`Failed to remove Asset.`, i15, LoggerTag.HEADER); }); g15.debug(`Remove AppLog_ID`, LoggerTag.HEADER); } g15.warn(`Current System can‘t use SystemCapability.Security.Asset`, LoggerTag.HEADER); } 