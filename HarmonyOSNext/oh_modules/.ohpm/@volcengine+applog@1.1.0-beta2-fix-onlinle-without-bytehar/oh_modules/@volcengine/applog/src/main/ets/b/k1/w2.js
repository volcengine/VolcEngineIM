import util from '@ohos.util'; import identifier from '@ohos.identifier.oaid'; import AAID from "@hms.core.AAID"; import sim from '@ohos.telephony.sim'; import LoggerTag from "../h1/j1"; import { checkPermission } from "./l3"; export function generateUUID() { return util.generateRandomUUID(); } export function queryOrGenerateUUID(d19, e19) { let f19 = e19.get(d19, ""); if (f19) { return f19; } else { let g19 = generateUUID(); e19.put(d19, g19); return g19; } } export async function getOaid(b19) { try { if (canIUse("SystemCapability.Advertising.OAID")) { if (await checkPermission(b19, "ohos.permission.APP_TRACKING_CONSENT")) { return identifier.getOAID(); } else { return ""; } } else { b19.warn("Current System can‘t use SystemCapability.Advertising.OAID", LoggerTag.HEADER); return ""; } } catch (c19) { b19.error("Get Oaid err", c19, LoggerTag.HEADER); return ""; } } export async function queryOrGetOaid(x18, y18) { let z18 = y18.kvStore().get(x18, ""); if (z18) { return z18; } else { let a19 = await getOaid(y18.appLogLogger()); if ("00000000-0000-0000-0000-000000000000" == a19) { a19 = ""; y18.appLogLogger().warn("Get Oaid Failed", LoggerTag.HEADER); } else { y18.kvStore().put(x18, a19); } return a19; } } export async function getAaid(v18) { try { return AAID.getAAID(); } catch (w18) { v18.error("Get Aaid err", w18, LoggerTag.HEADER); return ""; } } export async function queryOrGetAaid(s18, t18) { let u18 = t18.kvStore().get(s18, ""); if (u18) { return u18; } else { return getAaid(t18.appLogLogger()); } } export async function getSimRegion(q18) { if (canIUse("SystemCapability.Telephony.CoreService")) { let r18 = await getDefaultSlotId(q18); if (r18 != -1) { return sim.getISOCountryCodeForSim(r18); } q18.debug("Not Find Default SlotId", LoggerTag.HEADER); return ""; } q18.warn("Current System can‘t use SystemCapability.Telephony.CoreService", LoggerTag.HEADER); return ""; } export async function getMnnMnc(n18) { if (canIUse("SystemCapability.Telephony.CoreService")) { let o18 = await getDefaultSlotId(n18); if (o18 != -1) { let p18 = await sim.getSimOperatorNumeric(o18); return Promise.resolve(p18); } n18.debug("Not Find Default SlotId", LoggerTag.HEADER); return ""; } n18.warn("Current System can‘t use SystemCapability.Telephony.CoreService", LoggerTag.HEADER); return ""; } export async function getDefaultSlotId(j18) { if (canIUse("SystemCapability.Telephony.CoreService")) { try { let l18 = sim.getMaxSimCount(); for (let m18 = 0; m18 < l18; m18++) { if (sim.hasSimCardSync(m18)) { return m18; } } return -1; } catch (k18) { j18.error("GetDefaultSlotId catch promise error", k18, LoggerTag.HEADER); } return -1; } j18.warn("Current System can‘t use SystemCapability.Telephony.CoreService", LoggerTag.HEADER); return -1; } 