import Topic from "../../b/k/l"; import LoggerTag from "../../b/h1/j1"; import ProfileWorker from "./u3"; import { createEvent } from "../../b/h/s1"; import { isNotEmpty } from "../../b/k1/l1"; import EventType from "../../b/h/j"; import { KEY_SSID } from "../../b/o1/p1/q1"; const q28 = "__profile_"; const r28 = "set"; const s28 = "set_once"; const t28 = "increment"; const u28 = "append"; const v28 = "unset"; export class ProfileController { constructor(p29) { this.setForSetOnce = new Set(); this.setKeyTimeMap = new Map; this.ssidChange = false; this.sdkContext = p29; this.registerSsidChangeListener(); this.profileWorker = new ProfileWorker(p29); this.sdkContext.workEngine().addWorker(this.profileWorker); } registerSsidChangeListener() { this.sdkContext.dispatcher().on(Topic.SSIDChange, (n29) => { let o29 = n29[KEY_SSID]; if (isNotEmpty(o29)) { this.ssidChange = true; } }); } profileSet(j29) { let k29 = true; for (let l29 of Object.entries(j29)) { if (this.setKeyTimeMap.has(l29[0])) { let m29 = this.setKeyTimeMap.get(l29[0]); if (m29) { if (m29.value != l29[1]) { k29 = false; } } } else { k29 = false; } this.setKeyTimeMap.set(l29[0], { value: l29[1] }); } this.sdkContext.appLogLogger() .debug("ProfileSet ssidChange: {}, sameValue: {}", LoggerTag.PROFILE, this.ssidChange, k29); if (this.ssidChange || !k29) { this.receiveProfile(r28, j29); this.ssidChange = false; } else { this.sdkContext.appLogLogger() .debug("ProfileSet not send, profile: {}", LoggerTag.PROFILE, j29); } } profileSetOnce(f29) { let g29 = true; for (let h29 of Object.entries(f29)) { let i29 = h29[0]; if (!this.setForSetOnce.has(i29)) { g29 = false; } this.setForSetOnce.add(i29); } this.sdkContext.appLogLogger() .debug("ProfileSetOnce ssidChange: {}, hasSend: {}", LoggerTag.PROFILE, this.ssidChange, g29); if (!g29 || this.ssidChange) { this.receiveProfile(s28, f29); this.ssidChange = false; } else { this.sdkContext.appLogLogger() .debug("ProfileSetOnce not send, profile: {}", LoggerTag.PROFILE, f29); } } profileIncrement(d29) { for (let e29 of Object.entries(d29)) { if (Number.isInteger(e29[1])) { d29[e29[0]] = e29[1]; } else { this.sdkContext.appLogLogger() .warn("ProfileIncrement only support Int param, curr profile param: {}", LoggerTag.PROFILE, d29); return; } } this.receiveProfile(t28, d29); } profileAppend(a29) { for (let b29 of Object.entries(a29)) { let c29 = b29[1]; if (typeof c29 === "number") { if (Number.isInteger(b29[1])) { a29[b29[0]] = b29[1]; } else { this.sdkContext.appLogLogger() .warn(`profileAppend only support String、Int param, curr profile param: {}`, LoggerTag.PROFILE, a29); return; } } } this.receiveProfile(u28, a29); } profileUnset(y28) { let z28 = {}; z28[y28] = ""; this.receiveProfile(v28, z28); } receiveProfile(w28, x28) { this.sdkContext.appLogLogger() .debug("ReceiveProfile apiName: {}, profile: {}", LoggerTag.PROFILE, w28, x28); this.sdkContext.eventProcessor().receive(createEvent(q28 + w28, x28, EventType.PROFILE), true); this.flushProfile(); } flushProfile() { setTimeout(async () => { this.sdkContext.dispatcher().stickyOnce(Topic.DidReady, () => { this.profileWorker.requestWorker(); }); }, 500); } } 