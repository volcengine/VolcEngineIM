import { TTLogger } from "../p/l1"; import { TypedOutput } from "./u"; export class TypedArrayBuffer extends TypedOutput { constructor(buffer, mimeType = 'application/octet-stream') { super(); this.count = 0; this.readIndex = -1; this.count = buffer.byteLength; this.myBuffer = buffer; this.contentType = mimeType; } fileName() { return ''; } mimeType() { return this.contentType; } length() { return this.count; } async getBuffer(maxSize) { let p13 = new ArrayBuffer(maxSize); let q13 = new Uint8Array(p13); let r13 = 0; if (this.count - 1 - this.readIndex <= maxSize) { r13 = this.count - 1; } else { r13 = this.readIndex + maxSize; } let index = 0; let s13 = new Uint8Array(this.myBuffer); for (let t13 = this.readIndex + 1; t13 <= r13; ++t13) { q13[index++] = s13[t13]; } this.readIndex = r13; p13 = p13.slice(0, index); TTLogger.debug(TypedArrayBuffer.TAG, "islast " + (r13 === this.count - 1)); return [p13, r13 === this.count - 1]; } } TypedArrayBuffer.TAG = TypedArrayBuffer.name; 