import List from '@ohos.util.List'; import connection from '@ohos.net.connection'; import { SsHttpCall } from "./v1"; import { SsCall } from "../i1/a2"; import { Request } from "./c"; import { Response } from "./b"; export interface RequestInterceptor { intercept(request: Request): Request; } export interface ResponseInterceptor { intercept(request: Request, response: Response): Response; } export declare class TTNetworkClientBuilder { private requestInterceptors; private responseInterceptors; private provider; private connectTimeout; private readTimeout; private proxy; private caPath; addRequestInterceptor(interceptors: List<RequestInterceptor>): TTNetworkClientBuilder; addResponseInterceptor(interceptors: List<ResponseInterceptor>): TTNetworkClientBuilder; addClientProvider(i10: ClientProvider): TTNetworkClientBuilder; addHttpProxy(proxy: connection.HttpProxy | boolean): TTNetworkClientBuilder; addCaPath(caPath: string): TTNetworkClientBuilder; setConnectTimeOut(connectTimeout: number): TTNetworkClientBuilder; setReadTimeout(readTimeout: number): TTNetworkClientBuilder; setCaPath(caPath: string): TTNetworkClientBuilder; build(): TTNetworkClient; } export declare class TTNetworkClient { private requestInterceptors; private responseInterceptors; private provider; private connectTimeout; private readTimeout; private proxy; private caPath; constructor(f10: List<RequestInterceptor>, g10: List<ResponseInterceptor>, h10: ClientProvider, connectTimeout: number, readTimeout: number, proxy: connection.HttpProxy | boolean, caPath: string); newHttpCall(request: Request): SsHttpCall; setHttpProxy(proxy: connection.HttpProxy | boolean): void; setCaPath(caPath: string): void; } export interface ClientProvider { newSsCall(request: Request): SsCall; } 