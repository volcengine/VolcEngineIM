import List from '@ohos.util.List'; import connection from '@ohos.net.connection'; import { Header } from "./d"; import { ResponseBodyConverter } from "./m"; import { HttpRequestInfo } from "../g/k"; import { RequestBodyConverter } from "./u1"; export declare enum ResponseBodyTypeEnum { STRING = 0, ARRAYBUFFER = 1, JSON = 2 } export declare enum HttpMethodEnum { GET = 0, POST = 1, HEAD = 2, PUT = 3, DELETE = 4, PATCH = 5, OPTIONS = 6 } export declare class RequestContext { connectTimeout: number; readTimeout: number; writeTimeout: number; requestFlag: number; bypassCronetCookie: boolean; followRedirect: boolean; } export declare class Request { private readonly url; private readonly method; private readonly headers; private readonly responseStreaming; private readonly responseType; private readonly requestBodyConverter?; private readonly responseBodyConverter?; private readonly requestBody?; private readonly connectTimeout; private readonly readTimeout; private readonly proxy; private readonly caPath; private readonly httpRequestInfo; private readonly context; constructor(url: string, method: HttpMethodEnum, headers: List<Header>, responseType: ResponseBodyTypeEnum, m8: RequestBodyConverter | undefined, n8: ResponseBodyConverter | undefined, o8: string | object | ArrayBuffer | undefined, connectTimeout: number, readTimeout: number, proxy: connection.HttpProxy | boolean, caPath: string, p8: HttpRequestInfo, context: RequestContext); getUrl(): string; getMethod(): HttpMethodEnum; getResponseType(): ResponseBodyTypeEnum; getResponseBodyConverter(): ResponseBodyConverter | undefined; getRequestBodyConverter(): RequestBodyConverter | undefined; getHeaders(): List<Header>; getHeaderMap(): Map<string, string>; getFirstHeader(name: string): Header | null; getRequestBody(): string | object | ArrayBuffer | undefined; getConnectTimeout(): number; getReadTimeout(): number; getHttpProxy(): connection.HttpProxy | boolean; getCaPath(): string; getHttpRequestInfo(): HttpRequestInfo; getRequestContext(): RequestContext; isPureRequest(): boolean; newBuilder(url: string): RequestBuilder; } export declare class RequestBuilder { private requestUrl; private method; private headers; private responseType; private requestBodyConverter?; private responseBodyConverter?; private requestBody?; private connectTimeout; private readTimeout; private proxy; private capath; private requestInfo; private responseStreaming; private maxResponseBodyLength; private context; constructor(j8: string); build(): Request; setUrl(url: string): RequestBuilder; requestMethod(method: HttpMethodEnum): RequestBuilder; requestHeaders(headers: List<Header>): RequestBuilder; requestStreaming(i8: boolean): RequestBuilder; responseBodyType(type: ResponseBodyTypeEnum): RequestBuilder; postRequestBody(body: string | object | ArrayBuffer | undefined): RequestBuilder; addRequestBodyConverter(h8: RequestBodyConverter | undefined): RequestBuilder; addResponseBodyConverter(g8: ResponseBodyConverter | undefined): RequestBuilder; setConnectTimeout(timeout: number): RequestBuilder; setReadTimeout(timeout: number): RequestBuilder; setHttpProxy(proxy: connection.HttpProxy | boolean): RequestBuilder; setCaPath(caPath: string): RequestBuilder; setRequestInfo(f8: HttpRequestInfo): RequestBuilder; setRequestContext(context: RequestContext): RequestBuilder; } 