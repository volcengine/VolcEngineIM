import connection from '@ohos.net.connection'; import { RequestInterceptor, ResponseInterceptor, TTNetworkClient } from "./a/e"; import { CronetHttpClient } from "../cronet/k1"; import { TTEventListener } from "./g/c1"; import { TTDispatchResult } from '@bytedance/cronet'; export declare class TTNetworkUtils { private static requestInterceptors; private static responseInterceptors; private static client?; private static proxy; private static caPath; private static enableCronet; private static eventListenerManager; static createDefaultClient(): TTNetworkClient | undefined; static disableCronet(): void; static isCronetEnabled(): boolean; static preInitCronetKernel(): void; static getCronetHttpClient(): CronetHttpClient; static setDefaultTTNetClient(u14: TTNetworkClient): void; static setHttpProxy(proxy: connection.HttpProxy): void; static setCaPath(path: string): void; static addRequestInterceptor(t14: RequestInterceptor): void; static addResponseInterceptor(s14: ResponseInterceptor): void; static removeRequestInterceptor(r14: RequestInterceptor): void; static removeResponseInterceptor(q14: ResponseInterceptor): void; static registerEventListener(listener: TTEventListener): void; static removeEventListener(listener: TTEventListener): void; static getEventListenerManager(): TTEventListener; static urlDispatch(url: string): Promise<TTDispatchResult>; static setOpaque(n14: number, o14?: number, p14?: number): void; } 