import { ResponseCallback } from "../ttnet/i1/z1"; import { Request } from "../ttnet/a/c"; import { SsCall } from "../ttnet/i1/a2"; import { SsResponse } from "../ttnet/i1/j1"; import { TypedOutput } from "../ttnet/t/u"; export declare class CronetCall implements SsCall { private static readonly TAG; private static readonly CRONET_USER_AGENT; private static readonly STREAM_BUFFER_MAX_SIZE; private readonly originRequest; private readonly httpRequest; private readonly options; private readonly followRedirect; private httpStatusCode; private responseHeaders; private isDone; private onRedirectCalled; private isCanceled; constructor(request: Request); private createHttpRequestOptions; getRequest(): Request; private convertBodyType; private header2CronetHeader; private addExtraData; private saveSetCookieFromTTHttpResponse; private onRedirect; private onResponseStart; private onSuccess; private onFail; private onCancel; execute(): Promise<SsResponse>; executeInStreamCallback(callback: ResponseCallback): void; executeUploadInStream(f2: TypedOutput): Promise<SsResponse>; executeBothInStream(d2: TypedOutput, callback: ResponseCallback): void; private setupCallbacks; private setupStreamCallbacks; private setupUploadReadCallback; private updateRequestHeadersWithOutput; private startRequest; private setRequestEnd; private createCanceledError; cancel(): void; } 