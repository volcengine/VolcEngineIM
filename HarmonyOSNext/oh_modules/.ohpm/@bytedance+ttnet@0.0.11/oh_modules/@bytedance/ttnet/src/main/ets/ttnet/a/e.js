import List from '@ohos.util.List'; import { SsHttpCall } from "./v1"; import { OhosHttpClient } from "../../i/j"; export class TTNetworkClientBuilder { constructor() { this.requestInterceptors = new List(); this.responseInterceptors = new List(); this.provider = new OhosHttpClient(); this.connectTimeout = 30 * 1000; this.readTimeout = 30 * 1000; this.proxy = false; this.caPath = ""; } addRequestInterceptor(interceptors) { this.requestInterceptors = interceptors; return this; } addResponseInterceptor(interceptors) { this.responseInterceptors = interceptors; return this; } addClientProvider(i10) { this.provider = i10; return this; } addHttpProxy(proxy) { this.proxy = proxy; return this; } addCaPath(caPath) { this.caPath = caPath; return this; } setConnectTimeOut(connectTimeout) { this.connectTimeout = connectTimeout; return this; } setReadTimeout(readTimeout) { this.readTimeout = readTimeout; return this; } setCaPath(caPath) { this.caPath = caPath; return this; } build() { return new TTNetworkClient(this.requestInterceptors, this.responseInterceptors, this.provider, this.connectTimeout, this.readTimeout, this.proxy, this.caPath); } } export class TTNetworkClient { constructor(f10, g10, h10, connectTimeout, readTimeout, proxy, caPath) { this.connectTimeout = 30 * 1000; this.readTimeout = 30 * 1000; this.requestInterceptors = f10; this.responseInterceptors = g10; this.provider = h10; this.connectTimeout = connectTimeout; this.readTimeout = readTimeout; this.proxy = proxy; this.caPath = caPath; } newHttpCall(request) { let e10 = this.connectTimeout; let readTimeout = this.readTimeout; if (request.getConnectTimeout() > 0) { e10 = request.getConnectTimeout(); } if (request.getReadTimeout() > 0) { readTimeout = request.getReadTimeout(); } return new SsHttpCall(request, this.requestInterceptors, this.responseInterceptors, e10, readTimeout, this.proxy, this.provider, this.caPath); } setHttpProxy(proxy) { this.proxy = proxy; } setCaPath(caPath) { this.caPath = caPath; } } 