import { TypedOutput } from "./u"; import { contactStr2Ab } from "../p/y1"; import { TTLogger } from "../p/l1"; export class FormUrlEncodedTypedOutput extends TypedOutput { constructor(l12 = false, mimeType = 'application/x-www-form-urlencoded; charset=UTF-8') { super(); this.contentArrayBuffer = new ArrayBuffer(0); this.count = 0; this.readIndex = -1; this.fields = new Map(); this.enableRecordFields = l12; this.contentType = mimeType; } addField(name, value) { this.addFieldWithEncode(name, true, value, true); } addFieldWithEncode(name, j12, value, k12) { if (name.length <= 0) { TTLogger.info(FormUrlEncodedTypedOutput.TAG, "name is null"); return; } if (value === null) { TTLogger.info(FormUrlEncodedTypedOutput.TAG, "value is null"); return; } if (this.contentArrayBuffer.byteLength > 0) { this.contentArrayBuffer = contactStr2Ab(['&'], this.contentArrayBuffer); } if (this.enableRecordFields) { if (this.fields.has(name)) { const values = this.fields.get(name); if (values) { values.push(value); } } else { this.fields.set(name, [value]); } } try { if (j12) { name = encodeURIComponent(name); } if (k12) { value = encodeURIComponent(value); } this.contentArrayBuffer = contactStr2Ab([name, "=", value], this.contentArrayBuffer); this.count = this.contentArrayBuffer.byteLength; } catch (e) { throw new Error(e.message); } } getFields() { return this.fields; } mimeType() { return this.contentType; } length() { return this.contentArrayBuffer.byteLength; } async getBuffer(maxSize) { let e12 = new ArrayBuffer(maxSize); let f12 = new Uint8Array(e12); let g12 = 0; if (this.count - 1 - this.readIndex <= maxSize) { g12 = this.count - 1; } else { g12 = this.readIndex + maxSize; } let index = 0; let h12 = new Uint8Array(this.contentArrayBuffer); for (let i12 = this.readIndex + 1; i12 <= g12; ++i12) { f12[index++] = h12[i12]; } this.readIndex = g12; e12 = e12.slice(0, index); TTLogger.debug(FormUrlEncodedTypedOutput.TAG, "islast " + (g12 === this.count - 1)); return [e12, g12 === this.count - 1]; } } FormUrlEncodedTypedOutput.TAG = FormUrlEncodedTypedOutput.name; 