import webview from "@ohos.web.webview"; import { Header } from "../a/d"; import { PrefUtils } from "../p/x1"; import { wildcardMatch } from "../p/y1"; import { TTLogger } from "../p/l1"; import { HttpUtils } from "../p/m1"; import { TTJson } from "../p/n1"; export class ClientKeyManager { constructor() { this.enableClientKey = true; this.updateHostList = []; this.updatePathList = []; this.clientKey = ""; this.sessionId = ""; this.sessionUrl = ""; this.kmsVersion = ""; this.clientKeyHeaders = new Map(); } static getInstance() { if (!ClientKeyManager.sInstance) { ClientKeyManager.sInstance = new ClientKeyManager(); } return ClientKeyManager.sInstance; } setEnableClientKeyManager(enable) { this.enableClientKey = enable; } async initClientKeyAndSessionInfo() { if (!this.enableClientKey) { return; } this.kvStorage = PrefUtils.getPreferenceRepo(ClientKeyManager.CLIENT_KEY_CONFIG_FILE_NAME); const config = this.kvStorage.getString(ClientKeyManager.CLIENT_KEY_CONFIG_NAME); TTLogger.debug(ClientKeyManager.TAG, `client_key_config: ${config}`); if (config !== "") { try { const data = TTJson.parse(config); this.parseClientKeyConfig(data); } catch (e) { TTLogger.error(ClientKeyManager.TAG, `err:${e}`); } } if (!ClientKeyManager.clientKeyTncEnabled) { return; } let u11 = this.kvStorage.getString(ClientKeyManager.SESSION_ID_NAME); const v11 = this.kvStorage.getNumber(ClientKeyManager.SESSION_TIME_NAME); this.sessionUrl = this.kvStorage.getString(ClientKeyManager.SESSION_URL_NAME); this.clientKey = this.kvStorage.getString(ClientKeyManager.CLIENT_KEY_NAME); this.kmsVersion = this.kvStorage.getString(ClientKeyManager.KMS_VERSION_NAME); this.clientKeyHeaders = this.constructClientKeyHeaders(this.clientKey, this.kmsVersion); if (u11 === "" || this.sessionUrl === "") { return; } const w11 = u11.split(";"); if (w11 && w11.length > 0) { this.sessionId = w11[0].trim(); } if (this.sessionId === "") { return; } const result = this.replaceMaxAgeTime(w11, v11, u11); if (result !== "") { u11 = result; } TTLogger.debug(ClientKeyManager.TAG, `client key: ${this.clientKey} | kms version: ${this.kmsVersion} | session cookie: ${u11}
        | sessionid: ${this.sessionId} | session time: ${v11} | session url: ${this.sessionUrl}
        | config: ${config}`); await this.updateCookieInfo(u11); } addClientKeyHeader(request) { if (!this.enableClientKey) { return request; } if (!ClientKeyManager.clientKeyTncEnabled || this.clientKey === '' || this.kmsVersion === '') { return request; } let s11 = request.newBuilder(request.getUrl()); let t11 = request.getHeaders(); t11.add(new Header(ClientKeyManager.CLIENT_KEY_REQUEST_HEADER_NAME, this.clientKey)); t11.add(new Header(ClientKeyManager.KMS_VERSION_REQUEST_HEADER_NAME, this.kmsVersion)); s11.requestHeaders(t11); return s11.build(); } onTNCConfigUpdated(p11) { if (!this.enableClientKey) { return; } try { const q11 = p11.getJsonObject(); const data = q11 ? q11["data"] : undefined; const config = data ? data['client_key_config'] : undefined; if (!config) { ClientKeyManager.clientKeyTncEnabled = false; this.kvStorage?.clear(); return; } const r11 = TTJson.stringify(config); this.kvStorage?.setValue(ClientKeyManager.CLIENT_KEY_CONFIG_NAME, r11); TTLogger.debug(ClientKeyManager.TAG, `tnc set config str is ${r11}}`); this.parseClientKeyConfig(config); } catch (e) { TTLogger.error(ClientKeyManager.TAG, `Error processing client key config: ${e.message}`); } } UpdateClientKeyAndSessionInfo(response) { if (!this.enableClientKey) { return; } if (!ClientKeyManager.clientKeyTncEnabled) { return; } let g11 = HttpUtils.safeCreateUri(response.getUrl()); if (!g11 || response.getUrl().length === 0 || g11.scheme !== "https") { return; } if (this.updateHostList.length > 0) { let o11 = false; for (let host of this.updateHostList) { if (wildcardMatch(host, g11.host)) { o11 = true; break; } } if (!o11) { return; } } if (this.updateHostList.length > 0) { let n11 = false; for (let path of this.updatePathList) { if (wildcardMatch(path, g11.path)) { n11 = true; break; } } if (!n11) { return; } } let h11 = ""; let sessionId = ""; let headers = response.getHeadersWithKey("Set-Cookie"); if (headers.length > 0) { for (let header of headers) { const cookie = header.getValue().trim(); if (cookie.toLowerCase().startsWith("sessionid=")) { h11 = cookie; let m11 = h11.split(";"); if (m11.length > 0) { sessionId = m11[0].trim(); } break; } } } if (sessionId.length === 0) { return; } TTLogger.debug(ClientKeyManager.TAG, "original sessionid: " + this.sessionId + " new sessionid: " + sessionId); let i11 = ""; let j11 = ""; let k11 = response.getFirstHeadersWithKey(ClientKeyManager.CLIENT_KEY_RESPONSE_HEADER_NAME); let l11 = response.getFirstHeadersWithKey(ClientKeyManager.KMS_VERSION_RESPONSE_HEADER_NAME); if (k11 && l11) { i11 = k11.getValue(); j11 = l11.getValue(); if (i11.length === 0 || j11.length === 0) { i11 = ""; j11 = ""; } } else if (sessionId === this.sessionId) { i11 = this.clientKey; j11 = this.kmsVersion; } else { } this.clientKey = i11; this.kmsVersion = j11; this.sessionUrl = response.getUrl(); this.sessionId = sessionId; this.kvStorage?.setValue(ClientKeyManager.SESSION_URL_NAME, this.sessionUrl); this.kvStorage?.setValue(ClientKeyManager.SESSION_ID_NAME, h11); this.kvStorage?.setValue(ClientKeyManager.CLIENT_KEY_NAME, this.clientKey); this.kvStorage?.setValue(ClientKeyManager.KMS_VERSION_NAME, this.kmsVersion); this.kvStorage?.setValue(ClientKeyManager.SESSION_TIME_NAME, Date.now()); this.clientKeyHeaders = this.constructClientKeyHeaders(this.clientKey, this.kmsVersion); TTLogger.debug(ClientKeyManager.TAG, "save session url: " + this.sessionUrl + " session cookie: " + h11 + " client key: " + this.clientKey + " kms version: " + this.kmsVersion); } getClientKeyHeaders() { if (!ClientKeyManager.getInstance().enableClientKey) { return new Map(); } let result = new Map(); if (!ClientKeyManager.clientKeyTncEnabled) { return result; } return this.clientKeyHeaders; } parseClientKeyConfig(data) { ClientKeyManager.clientKeyTncEnabled = data.c1 > 0; if (!ClientKeyManager.clientKeyTncEnabled) { TTLogger.info(ClientKeyManager.TAG, "clear client key storage."); this.kvStorage?.clear(); return; } this.updateHostList = data.d1 ?? []; this.updatePathList = data.e1 ?? []; TTLogger.debug(ClientKeyManager.TAG, `updateHostList: ${this.updateHostList}, updatePathList:${this.updatePathList}`); } constructClientKeyHeaders(c11, d11) { const headers = new Map(); if (c11.length === 0 || d11.length === 0) { return headers; } headers.set(ClientKeyManager.CLIENT_KEY_REQUEST_HEADER_NAME, c11); headers.set(ClientKeyManager.KMS_VERSION_REQUEST_HEADER_NAME, d11); return headers; } replaceMaxAgeTime(s10, t10, u10) { if (s10.length < 2 || t10 <= 0) { return ""; } let v10 = []; let w10 = ""; const x10 = "max-age"; for (const b11 of s10) { if (b11.length > 0 && b11.toLowerCase().trim().startsWith(x10.toLowerCase())) { v10 = b11.split("="); w10 = b11; break; } } if (v10.length !== 2) { return ""; } try { const y10 = parseInt(v10[1], 10); if (y10 <= 0) { return ''; } const z10 = y10 - Math.floor((Date.now() - t10) / 1000); const a11 = z10 <= 0 ? 0 : z10; return u10.replace(new RegExp(w10.trim(), 'i'), `${x10}=${a11}`); } catch (error) { return ''; } } async updateCookieInfo(q10) { try { const r10 = await webview.WebCookieManager.fetchCookie(this.sessionUrl); if (r10.length > 0) { if (!r10.includes(this.sessionId)) { await webview.WebCookieManager.configCookie(this.sessionUrl, q10); TTLogger.error(ClientKeyManager.TAG, "sessionid mismatch, cookie is " + r10 + " store id is" + this.sessionId); } } else { await webview.WebCookieManager.configCookie(this.sessionUrl, q10); TTLogger.error(ClientKeyManager.TAG, "sessionid mismatch because of cookie empty"); } } catch (e) { } } static constructClientKeyHeaders(e11, f11) { let result = new Map(); if (e11.length === 0 || f11.length === 0) { return result; } result.set(ClientKeyManager.CLIENT_KEY_REQUEST_HEADER_NAME, e11); result.set(ClientKeyManager.KMS_VERSION_REQUEST_HEADER_NAME, f11); return result; } } ClientKeyManager.TAG = ClientKeyManager.name; ClientKeyManager.clientKeyTncEnabled = false; ClientKeyManager.CLIENT_KEY_CONFIG_FILE_NAME = "ttnet_client_key_config"; ClientKeyManager.CLIENT_KEY_CONFIG_NAME = "client_key_config"; ClientKeyManager.CLIENT_KEY_NAME = "client_key"; ClientKeyManager.SESSION_ID_NAME = "session_id"; ClientKeyManager.SESSION_URL_NAME = "session_url"; ClientKeyManager.KMS_VERSION_NAME = "kms_version"; ClientKeyManager.CLIENT_KEY_REQUEST_HEADER_NAME = "x-bd-client-key"; ClientKeyManager.CLIENT_KEY_RESPONSE_HEADER_NAME = "x-bd-lanusk"; ClientKeyManager.KMS_VERSION_REQUEST_HEADER_NAME = "x-bd-kmsv"; ClientKeyManager.KMS_VERSION_RESPONSE_HEADER_NAME = "x-bd-lanusv"; ClientKeyManager.MAX_AGE_NAME = "Max-Age="; ClientKeyManager.SESSION_TIME_NAME = "session_time"; ClientKeyManager.HEADER_SPLIT_STRING = "\r\n"; ClientKeyManager.RESPONSE_CLIENT_KEY_DEFAULT = 0; ClientKeyManager.RESPONSE_CLIENT_KEY_INVALID = 1; ClientKeyManager.RESPONSE_CLIENT_KEY_SAME_NULL = 2; ClientKeyManager.RESPONSE_CLIENT_KEY_NULL = 3; 