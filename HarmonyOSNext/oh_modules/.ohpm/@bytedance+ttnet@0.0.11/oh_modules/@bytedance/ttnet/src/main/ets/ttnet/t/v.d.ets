import { TypedOutput } from "./u"; export declare class MimePart { private static readonly TAG; private body; private name; private transferEncoding; private isFirst; private boundary; private partBoundary?; private partHeader?; private isBuilt; private isBoundaryAndHeaderRead; constructor(name: string, n13: string, body: TypedOutput, o13: string, isFirst: boolean); getBuffer(maxSize: number): Promise<[ ArrayBuffer, boolean ]>; size(): number; private build; } export declare class MultipartTypedOutput extends TypedOutput { private static readonly TAG; static readonly DEFAULT_TRANSFER_ENCODING: string; private readonly boundary; private readonly footer; private totalLength; mimeParts: MimePart[]; private currentUploadPartIndex; private currentUploadCount; constructor(a13?: string); addPart(name: string, body: TypedOutput): void; addPartWithDetail(name: string, y12: string, body: TypedOutput): void; mimeType(): string; length(): number; getBuffer(maxSize: number): Promise<[ ArrayBuffer, boolean ]>; static buildBoundary(n12: string, first: boolean, last: boolean): ArrayBuffer; static buildHeader(name: string, m12: string, value: TypedOutput): ArrayBuffer; } 