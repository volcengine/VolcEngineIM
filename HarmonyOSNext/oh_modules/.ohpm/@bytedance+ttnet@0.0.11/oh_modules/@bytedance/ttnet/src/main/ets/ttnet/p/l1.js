import hilog from "@ohos.hilog"; var LogLevel; (function (LogLevel) { LogLevel["DEBUG"] = "DEBUG"; LogLevel["INFO"] = "INFO"; LogLevel["WARN"] = "WARN"; LogLevel["ERROR"] = "ERROR"; })(LogLevel || (LogLevel = {})); export class TTLogger { static shouldLog(level) { const j16 = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR]; return j16.indexOf(level) >= j16.indexOf(TTLogger.level); } static disableDebug() { TTLogger.level = LogLevel.INFO; } static log(level, ...args) { if (!TTLogger.shouldLog(level)) { return; } switch (level) { case LogLevel.DEBUG: hilog.debug(TTLogger.DOMAIN, TTLogger.TAG, '%{public}s', args.join('')); break; case LogLevel.INFO: hilog.info(TTLogger.DOMAIN, TTLogger.TAG, '%{public}s', args.join('')); break; case LogLevel.WARN: hilog.warn(TTLogger.DOMAIN, TTLogger.TAG, '%{public}s', args.join('')); break; case LogLevel.ERROR: hilog.error(TTLogger.DOMAIN, TTLogger.TAG, '%{public}s', args.join('')); break; } } static debug(tag, ...args) { TTLogger.log(LogLevel.DEBUG, `[${tag}]`, ...args); } static info(tag, ...args) { TTLogger.log(LogLevel.INFO, `[${tag}]`, ...args); } static warn(tag, ...args) { TTLogger.log(LogLevel.WARN, `[${tag}]`, ...args); } static error(tag, ...args) { TTLogger.log(LogLevel.ERROR, `[${tag}]`, ...args); } } TTLogger.TAG = "TTNetTag"; TTLogger.DOMAIN = 0x0000; TTLogger.level = LogLevel.DEBUG; 