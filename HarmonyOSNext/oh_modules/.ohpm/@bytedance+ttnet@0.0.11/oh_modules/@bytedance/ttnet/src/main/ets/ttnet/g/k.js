import { TTNetworkUtils } from "../f"; import { JsonParams } from "../p/w1"; import { TTJson } from "../p/n1"; import { TTLogger } from "../p/l1"; export class HttpRequestInfo { constructor(url) { this.isApiOk = false; this.netError = 0; this.httpCode = -1; this.startTime = -1; this.endTime = -1; this.requestDuration = -1; this.method = "GET"; this.logId = ''; this.errMsg = ''; this.requestLog = ''; this.resolveDuration = -1; this.rejectDuration = -1; this.covertDuration = -1; this.dispatchForCookieDuration = -1; this.addCookieHeaderDuration = -1; this.saveResponseCookieDuration = -1; this.saveRedirectCookieDuration = -1; this.bizData = new Map(); this.url = url; } computeRequestDuration() { this.endTime = Date.now(); if (this.requestLog.length != 0) { try { const jsonObject = TTJson.parse(this.requestLog); this.requestDuration = jsonObject["timing"]["request"]["duration"]; } catch (error) { TTLogger.error(HttpRequestInfo.TAG, "Invalid JSON string", error); } } else { let duration = this.endTime - this.startTime; if (duration > 0) { this.requestDuration = duration; } } } generateApiData() { let n10 = new JsonParams(); if (this.errMsg !== '') { n10.add("errMsg", this.errMsg); } if (this.logId !== '') { n10.add("logid", this.logId); } n10.add("timing_total", this.requestDuration); n10.add("api_timing", this.getApiTimingInfo()); if (TTNetworkUtils.isCronetEnabled()) { if (this.requestLog.length !== 0) { n10.add("request_log", this.requestLog); } } else { n10.add("request_log", this.generateRequestLog()); } this.apiData = TTJson.parse(n10.toJsonString()); } getApiTimingInfo() { let m10 = new JsonParams(); if (this.resolveDuration >= 0) { m10.add("resolve", this.resolveDuration); } else if (this.rejectDuration >= 0) { m10.add("reject", this.rejectDuration); } if (this.covertDuration >= 0) { m10.add("convert", this.covertDuration); } if (this.dispatchForCookieDuration >= 0) { m10.add("disp4Cookie", this.dispatchForCookieDuration); } if (this.addCookieHeaderDuration >= 0) { m10.add("addCookie", this.addCookieHeaderDuration); } if (this.saveResponseCookieDuration >= 0) { m10.add("saveRespCookie", this.saveResponseCookieDuration); } if (this.saveRedirectCookieDuration >= 0) { m10.add("saveRdrtCookie", this.saveRedirectCookieDuration); } if (this.endTime > 0 && this.startTime > 0 && this.endTime > this.startTime) { m10.add("api_duration", this.endTime - this.startTime); } return m10; } generateRequestLog() { let l10 = new JsonParams(); l10.add("base", this.getBaseInfo()); l10.add("other", this.getOtherInfo()); l10.add("timing", this.getRequestTiming()); l10.add("response", this.getResponseInfo()); l10.add("header", this.getHeadersInfo()); this.requestLog = l10.toJsonString(); return l10; } getBaseInfo() { let base = new JsonParams(); let index = this.url.indexOf("?"); if (index > 0) { base.add("origin_url", this.url.substring(0, index)); } else { base.add("origin_url", this.url); } base.add("method", this.method); if (this.netError < 0) { base.add("net_error", this.netError); base.add("status", "FAILED"); } else { base.add("status", "SUCCESS"); } return base; } getOtherInfo() { let other = new JsonParams(); other.add("libcore", "ohos"); return other; } getRequestTiming() { let k10 = new JsonParams(); let request = new JsonParams(); request.add("duration", this.requestDuration); request.add("start_time", this.startTime); k10.add("request", request); return k10; } getResponseInfo() { let response = new JsonParams(); response.add("code", this.httpCode); return response; } getHeadersInfo() { let headers = new JsonParams(); if (this.responseHeaders) { for (let header of this.responseHeaders) { if (header.getName().toLowerCase().startsWith(HttpRequestInfo.X_TT_PREFIX_HEADER)) { headers.add(header.getName(), header.getValue()); continue; } if (header.getName().toLowerCase() === HttpRequestInfo.SERVER_TIMING_HEADER) { headers.add(header.getName(), header.getValue()); continue; } } } return headers; } toString() { const j10 = this.apiData ? TTJson.stringify(this.apiData) : ''; return `isOk: ${this.isApiOk}, netError: ${this.netError}, httpCode: ${this.httpCode}, apiData: ${j10}`; } } HttpRequestInfo.TAG = HttpRequestInfo.name; HttpRequestInfo.SERVER_TIMING_HEADER = "server-timing"; HttpRequestInfo.X_TT_PREFIX_HEADER = "x-tt-"; export class ApiRequestMonitorHook { } export class TTApiRequestMonitor { static setApiRequestMonitor(monitor) { TTApiRequestMonitor.sApiRequestMonitor = monitor; } static getApiRequestMonitor() { return TTApiRequestMonitor.sApiRequestMonitor; } } 