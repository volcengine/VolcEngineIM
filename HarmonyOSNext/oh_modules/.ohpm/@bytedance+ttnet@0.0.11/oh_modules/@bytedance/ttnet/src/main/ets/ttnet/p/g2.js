; export class Md5 { static hashStr(str, d16 = false) { return this.onePassHasher .start() .appendStr(str) .end(d16); } static hashArray(arr, c16 = false) { return this.onePassHasher .start() .appendByteArray(arr) .end(c16); } static hashAsciiStr(str, b16 = false) { return this.onePassHasher .start() .appendAsciiStr(str) .end(b16); } static _hex(x) { const x15 = Md5.hexChars; const y15 = Md5.hexOut; let n; let offset; let z15; let a16; for (a16 = 0; a16 < 4; a16 += 1) { offset = a16 * 8; n = x[a16]; for (z15 = 0; z15 < 8; z15 += 2) { y15[offset + 1 + z15] = x15.charAt(n & 0x0F); n >>>= 4; y15[offset + 0 + z15] = x15.charAt(n & 0x0F); n >>>= 4; } } return y15.join(''); } static _md5cycle(x, k) { let a = x[0]; let b = x[1]; let c = x[2]; let d = x[3]; a += (b & c | ~b & d) + k[0] - 680876936 | 0; a = (a << 7 | a >>> 25) + b | 0; d += (a & b | ~a & c) + k[1] - 389564586 | 0; d = (d << 12 | d >>> 20) + a | 0; c += (d & a | ~d & b) + k[2] + 606105819 | 0; c = (c << 17 | c >>> 15) + d | 0; b += (c & d | ~c & a) + k[3] - 1044525330 | 0; b = (b << 22 | b >>> 10) + c | 0; a += (b & c | ~b & d) + k[4] - 176418897 | 0; a = (a << 7 | a >>> 25) + b | 0; d += (a & b | ~a & c) + k[5] + 1200080426 | 0; d = (d << 12 | d >>> 20) + a | 0; c += (d & a | ~d & b) + k[6] - 1473231341 | 0; c = (c << 17 | c >>> 15) + d | 0; b += (c & d | ~c & a) + k[7] - 45705983 | 0; b = (b << 22 | b >>> 10) + c | 0; a += (b & c | ~b & d) + k[8] + 1770035416 | 0; a = (a << 7 | a >>> 25) + b | 0; d += (a & b | ~a & c) + k[9] - 1958414417 | 0; d = (d << 12 | d >>> 20) + a | 0; c += (d & a | ~d & b) + k[10] - 42063 | 0; c = (c << 17 | c >>> 15) + d | 0; b += (c & d | ~c & a) + k[11] - 1990404162 | 0; b = (b << 22 | b >>> 10) + c | 0; a += (b & c | ~b & d) + k[12] + 1804603682 | 0; a = (a << 7 | a >>> 25) + b | 0; d += (a & b | ~a & c) + k[13] - 40341101 | 0; d = (d << 12 | d >>> 20) + a | 0; c += (d & a | ~d & b) + k[14] - 1502002290 | 0; c = (c << 17 | c >>> 15) + d | 0; b += (c & d | ~c & a) + k[15] + 1236535329 | 0; b = (b << 22 | b >>> 10) + c | 0; a += (b & d | c & ~d) + k[1] - 165796510 | 0; a = (a << 5 | a >>> 27) + b | 0; d += (a & c | b & ~c) + k[6] - 1069501632 | 0; d = (d << 9 | d >>> 23) + a | 0; c += (d & b | a & ~b) + k[11] + 643717713 | 0; c = (c << 14 | c >>> 18) + d | 0; b += (c & a | d & ~a) + k[0] - 373897302 | 0; b = (b << 20 | b >>> 12) + c | 0; a += (b & d | c & ~d) + k[5] - 701558691 | 0; a = (a << 5 | a >>> 27) + b | 0; d += (a & c | b & ~c) + k[10] + 38016083 | 0; d = (d << 9 | d >>> 23) + a | 0; c += (d & b | a & ~b) + k[15] - 660478335 | 0; c = (c << 14 | c >>> 18) + d | 0; b += (c & a | d & ~a) + k[4] - 405537848 | 0; b = (b << 20 | b >>> 12) + c | 0; a += (b & d | c & ~d) + k[9] + 568446438 | 0; a = (a << 5 | a >>> 27) + b | 0; d += (a & c | b & ~c) + k[14] - 1019803690 | 0; d = (d << 9 | d >>> 23) + a | 0; c += (d & b | a & ~b) + k[3] - 187363961 | 0; c = (c << 14 | c >>> 18) + d | 0; b += (c & a | d & ~a) + k[8] + 1163531501 | 0; b = (b << 20 | b >>> 12) + c | 0; a += (b & d | c & ~d) + k[13] - 1444681467 | 0; a = (a << 5 | a >>> 27) + b | 0; d += (a & c | b & ~c) + k[2] - 51403784 | 0; d = (d << 9 | d >>> 23) + a | 0; c += (d & b | a & ~b) + k[7] + 1735328473 | 0; c = (c << 14 | c >>> 18) + d | 0; b += (c & a | d & ~a) + k[12] - 1926607734 | 0; b = (b << 20 | b >>> 12) + c | 0; a += (b ^ c ^ d) + k[5] - 378558 | 0; a = (a << 4 | a >>> 28) + b | 0; d += (a ^ b ^ c) + k[8] - 2022574463 | 0; d = (d << 11 | d >>> 21) + a | 0; c += (d ^ a ^ b) + k[11] + 1839030562 | 0; c = (c << 16 | c >>> 16) + d | 0; b += (c ^ d ^ a) + k[14] - 35309556 | 0; b = (b << 23 | b >>> 9) + c | 0; a += (b ^ c ^ d) + k[1] - 1530992060 | 0; a = (a << 4 | a >>> 28) + b | 0; d += (a ^ b ^ c) + k[4] + 1272893353 | 0; d = (d << 11 | d >>> 21) + a | 0; c += (d ^ a ^ b) + k[7] - 155497632 | 0; c = (c << 16 | c >>> 16) + d | 0; b += (c ^ d ^ a) + k[10] - 1094730640 | 0; b = (b << 23 | b >>> 9) + c | 0; a += (b ^ c ^ d) + k[13] + 681279174 | 0; a = (a << 4 | a >>> 28) + b | 0; d += (a ^ b ^ c) + k[0] - 358537222 | 0; d = (d << 11 | d >>> 21) + a | 0; c += (d ^ a ^ b) + k[3] - 722521979 | 0; c = (c << 16 | c >>> 16) + d | 0; b += (c ^ d ^ a) + k[6] + 76029189 | 0; b = (b << 23 | b >>> 9) + c | 0; a += (b ^ c ^ d) + k[9] - 640364487 | 0; a = (a << 4 | a >>> 28) + b | 0; d += (a ^ b ^ c) + k[12] - 421815835 | 0; d = (d << 11 | d >>> 21) + a | 0; c += (d ^ a ^ b) + k[15] + 530742520 | 0; c = (c << 16 | c >>> 16) + d | 0; b += (c ^ d ^ a) + k[2] - 995338651 | 0; b = (b << 23 | b >>> 9) + c | 0; a += (c ^ (b | ~d)) + k[0] - 198630844 | 0; a = (a << 6 | a >>> 26) + b | 0; d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0; d = (d << 10 | d >>> 22) + a | 0; c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0; c = (c << 15 | c >>> 17) + d | 0; b += (d ^ (c | ~a)) + k[5] - 57434055 | 0; b = (b << 21 | b >>> 11) + c | 0; a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0; a = (a << 6 | a >>> 26) + b | 0; d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0; d = (d << 10 | d >>> 22) + a | 0; c += (a ^ (d | ~b)) + k[10] - 1051523 | 0; c = (c << 15 | c >>> 17) + d | 0; b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0; b = (b << 21 | b >>> 11) + c | 0; a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0; a = (a << 6 | a >>> 26) + b | 0; d += (b ^ (a | ~c)) + k[15] - 30611744 | 0; d = (d << 10 | d >>> 22) + a | 0; c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0; c = (c << 15 | c >>> 17) + d | 0; b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0; b = (b << 21 | b >>> 11) + c | 0; a += (c ^ (b | ~d)) + k[4] - 145523070 | 0; a = (a << 6 | a >>> 26) + b | 0; d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0; d = (d << 10 | d >>> 22) + a | 0; c += (a ^ (d | ~b)) + k[2] + 718787259 | 0; c = (c << 15 | c >>> 17) + d | 0; b += (d ^ (c | ~a)) + k[9] - 343485551 | 0; b = (b << 21 | b >>> 11) + c | 0; x[0] = a + x[0] | 0; x[1] = b + x[1] | 0; x[2] = c + x[2] | 0; x[3] = d + x[3] | 0; } constructor() { this._dataLength = 0; this._bufferLength = 0; this._state = new Int32Array(4); this._buffer = new ArrayBuffer(68); this._buffer8 = new Uint8Array(this._buffer, 0, 68); this._buffer32 = new Uint32Array(this._buffer, 0, 17); this.start(); } start() { this._dataLength = 0; this._bufferLength = 0; this._state.set(Md5.stateIdentity); return this; } appendStr(str) { const t15 = this._buffer8; const u15 = this._buffer32; let v15 = this._bufferLength; let code; let w15; for (w15 = 0; w15 < str.length; w15 += 1) { code = str.charCodeAt(w15); if (code < 128) { t15[v15++] = code; } else if (code < 0x800) { t15[v15++] = (code >>> 6) + 0xC0; t15[v15++] = code & 0x3F | 0x80; } else if (code < 0xD800 || code > 0xDBFF) { t15[v15++] = (code >>> 12) + 0xE0; t15[v15++] = (code >>> 6 & 0x3F) | 0x80; t15[v15++] = (code & 0x3F) | 0x80; } else { code = ((code - 0xD800) * 0x400) + (str.charCodeAt(++w15) - 0xDC00) + 0x10000; if (code > 0x10FFFF) { throw new Error('Unicode standard supports code points up to U+10FFFF'); } t15[v15++] = (code >>> 18) + 0xF0; t15[v15++] = (code >>> 12 & 0x3F) | 0x80; t15[v15++] = (code >>> 6 & 0x3F) | 0x80; t15[v15++] = (code & 0x3F) | 0x80; } if (v15 >= 64) { this._dataLength += 64; Md5._md5cycle(this._state, u15); v15 -= 64; u15[0] = u15[16]; } } this._bufferLength = v15; return this; } appendAsciiStr(str) { const o15 = this._buffer8; const p15 = this._buffer32; let q15 = this._bufferLength; let r15; let s15 = 0; for (;;) { r15 = Math.min(str.length - s15, 64 - q15); while (r15--) { o15[q15++] = str.charCodeAt(s15++); } if (q15 < 64) { break; } this._dataLength += 64; Md5._md5cycle(this._state, p15); q15 = 0; } this._bufferLength = q15; return this; } appendByteArray(input) { const j15 = this._buffer8; const k15 = this._buffer32; let l15 = this._bufferLength; let m15; let n15 = 0; for (;;) { m15 = Math.min(input.length - n15, 64 - l15); while (m15--) { j15[l15++] = input[n15++]; } if (l15 < 64) { break; } this._dataLength += 64; Md5._md5cycle(this._state, k15); l15 = 0; } this._bufferLength = l15; return this; } getState() { const s = this._state; return { buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)), f1: this._bufferLength, length: this._dataLength, state: [s[0], s[1], s[2], s[3]] }; } setState(state) { const buf = state.buffer; const x = state.state; const s = this._state; let i15; this._dataLength = state.length; this._bufferLength = state.f1; s[0] = x[0]; s[1] = x[1]; s[2] = x[2]; s[3] = x[3]; for (i15 = 0; i15 < buf.length; i15 += 1) { this._buffer8[i15] = buf.charCodeAt(i15); } } end(a15 = false) { const b15 = this._bufferLength; const c15 = this._buffer8; const d15 = this._buffer32; const e15 = (b15 >> 2) + 1; this._dataLength += b15; const f15 = this._dataLength * 8; c15[b15] = 0x80; c15[b15 + 1] = c15[b15 + 2] = c15[b15 + 3] = 0; d15.set(Md5.buffer32Identity.subarray(e15), e15); if (b15 > 55) { Md5._md5cycle(this._state, d15); d15.set(Md5.buffer32Identity); } if (f15 <= 0xFFFFFFFF) { d15[14] = f15; } else { const matches = f15.toString(16).match(/(.*?)(.{0,8})$/); if (matches === null) { return; } const g15 = parseInt(matches[2], 16); const h15 = parseInt(matches[1], 16) || 0; d15[14] = g15; d15[15] = h15; } Md5._md5cycle(this._state, d15); return a15 ? this._state : Md5._hex(this._state); } } Md5.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]); Md5.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); Md5.hexChars = '0123456789abcdef'; Md5.hexOut = []; Md5.onePassHasher = new Md5(); if (Md5.hashStr('hello') !== '5d41402abc4b2a76b9719d911017c592') { throw new Error('Md5 self test failed.'); } 