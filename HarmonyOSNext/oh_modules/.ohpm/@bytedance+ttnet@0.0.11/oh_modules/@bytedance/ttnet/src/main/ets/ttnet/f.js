import List from '@ohos.util.List'; import { TTNetworkClientBuilder } from "./a/e"; import { OhosHttpClient } from "../i/j"; import { CronetHttpClient } from "../cronet/k1"; import { TTEventListenerManager } from "./i1/b2"; export class TTNetworkUtils { static createDefaultClient() { if (!TTNetworkUtils.client) { if (TTNetworkUtils.enableCronet) { TTNetworkUtils.client = new TTNetworkClientBuilder().addRequestInterceptor(TTNetworkUtils.requestInterceptors) .addResponseInterceptor(TTNetworkUtils.responseInterceptors) .addClientProvider(TTNetworkUtils.getCronetHttpClient()) .build(); } else { TTNetworkUtils.client = new TTNetworkClientBuilder().addRequestInterceptor(TTNetworkUtils.requestInterceptors) .addResponseInterceptor(TTNetworkUtils.responseInterceptors) .addClientProvider(new OhosHttpClient()) .addHttpProxy(TTNetworkUtils.proxy) .addCaPath(TTNetworkUtils.caPath) .build(); } } return TTNetworkUtils.client; } static disableCronet() { TTNetworkUtils.enableCronet = false; } static isCronetEnabled() { return TTNetworkUtils.enableCronet; } static preInitCronetKernel() { TTNetworkUtils.getCronetHttpClient(); } static getCronetHttpClient() { let v14 = CronetHttpClient.inst(); v14.tryCreateCronetEngine(); return v14; } static setDefaultTTNetClient(u14) { TTNetworkUtils.client = u14; } static setHttpProxy(proxy) { TTNetworkUtils.proxy = proxy; } static setCaPath(path) { TTNetworkUtils.caPath = path; } static addRequestInterceptor(t14) { TTNetworkUtils.requestInterceptors.add(t14); } static addResponseInterceptor(s14) { TTNetworkUtils.responseInterceptors.add(s14); } static removeRequestInterceptor(r14) { TTNetworkUtils.requestInterceptors.remove(r14); } static removeResponseInterceptor(q14) { TTNetworkUtils.responseInterceptors.remove(q14); } static registerEventListener(listener) { TTNetworkUtils.eventListenerManager.registerEventListener(listener); } static removeEventListener(listener) { TTNetworkUtils.eventListenerManager.removeEventListener(listener); } static getEventListenerManager() { return TTNetworkUtils.eventListenerManager; } static urlDispatch(url) { if (!TTNetworkUtils.enableCronet) { throw new Error("TTNetworkUtils.enableCronet is false"); } return TTNetworkUtils.getCronetHttpClient().urlDispatch(url); } static setOpaque(n14, o14, p14) { if (!TTNetworkUtils.enableCronet) { throw new Error("TTNetworkUtils.enableCronet is false"); } CronetHttpClient.inst().setOpaque(n14, o14, p14); } } TTNetworkUtils.requestInterceptors = new List(); TTNetworkUtils.responseInterceptors = new List(); TTNetworkUtils.caPath = ""; TTNetworkUtils.enableCronet = true; TTNetworkUtils.eventListenerManager = new TTEventListenerManager(); 