import { TTCronetEngine, TTDispatchResult, TTSecurityInfo } from '@bytedance/cronet/Index'; import { Request } from "../ttnet/a/c"; import { ClientProvider } from "../ttnet/a/e"; import { SsCall } from "../ttnet/i1/a2"; export declare class CronetHttpClient implements ClientProvider { private static instance; private cronetEngine?; private networkLibrary; private securityCallback; private securityCallbackWS; private freeCallback; private constructor(); static inst(): CronetHttpClient; tryCreateCronetEngine(): void; private initBizModules; getCurrentNetworkState(): Promise<string>; setEnableRefreshProxy(enable: boolean, l5: number): Promise<void>; getCronetEngine(): TTCronetEngine | undefined; private getAppInfo; setProxy(proxy: string): void; triggerGetDomain(g5: boolean): void; urlDispatch(url: string): Promise<TTDispatchResult>; setOpaque(d5: number, e5?: number, f5?: number): void; setSecurityCallbackForTesting(callback: Callback<TTSecurityInfo>): void; newSsCall(request: Request): SsCall; } 