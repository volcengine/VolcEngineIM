import List from '@ohos.util.List'; import { HttpRequestInfo } from "../g/k"; export var ResponseBodyTypeEnum; (function (r8) { r8[r8["STRING"] = 0] = "STRING"; r8[r8["ARRAYBUFFER"] = 1] = "ARRAYBUFFER"; r8[r8["JSON"] = 2] = "JSON"; })(ResponseBodyTypeEnum || (ResponseBodyTypeEnum = {})); export var HttpMethodEnum; (function (q8) { q8[q8["GET"] = 0] = "GET"; q8[q8["POST"] = 1] = "POST"; q8[q8["HEAD"] = 2] = "HEAD"; q8[q8["PUT"] = 3] = "PUT"; q8[q8["DELETE"] = 4] = "DELETE"; q8[q8["PATCH"] = 5] = "PATCH"; q8[q8["OPTIONS"] = 6] = "OPTIONS"; })(HttpMethodEnum || (HttpMethodEnum = {})); export class RequestContext { constructor() { this.connectTimeout = 0; this.readTimeout = 0; this.writeTimeout = 0; this.requestFlag = 0; this.bypassCronetCookie = false; this.followRedirect = true; } } export class Request { constructor(url, method, headers, responseType, m8, n8, o8, connectTimeout, readTimeout, proxy, caPath, p8, context) { this.method = HttpMethodEnum.GET; this.responseStreaming = false; this.responseType = ResponseBodyTypeEnum.STRING; this.context = new RequestContext(); this.url = url; this.method = method; this.headers = headers; this.responseType = responseType; this.requestBodyConverter = m8; this.responseBodyConverter = n8; if (n8) { this.responseType = ResponseBodyTypeEnum.ARRAYBUFFER; } this.requestBody = o8; this.connectTimeout = connectTimeout; this.readTimeout = readTimeout; this.proxy = proxy; this.caPath = caPath; this.httpRequestInfo = p8; this.context = context; } getUrl() { return this.url; } getMethod() { return this.method; } getResponseType() { return this.responseType; } getResponseBodyConverter() { return this.responseBodyConverter; } getRequestBodyConverter() { return this.requestBodyConverter; } getHeaders() { return this.headers; } getHeaderMap() { let l8 = new Map(); for (let header of this.headers) { l8.set(header.getName(), header.getValue()); } return l8; } getFirstHeader(name) { for (let k8 of this.headers) { if (name.toLowerCase() === k8.getName().toLowerCase()) { return k8; } } return null; } getRequestBody() { return this.requestBody; } getConnectTimeout() { return this.connectTimeout; } getReadTimeout() { return this.readTimeout; } getHttpProxy() { return this.proxy; } getCaPath() { return this.caPath; } getHttpRequestInfo() { return this.httpRequestInfo; } getRequestContext() { return this.context; } isPureRequest() { let value = this.getFirstHeader("x-metasec-bypass-ttnet-features"); if (value != null) { return value.getValue() == "1"; } return false; } newBuilder(url) { let builder = new RequestBuilder(url); builder.requestMethod(this.method); builder.requestHeaders(this.headers); builder.responseBodyType(this.responseType); builder.requestStreaming(this.responseStreaming); builder.postRequestBody(this.requestBody); builder.setConnectTimeout(this.connectTimeout); builder.setReadTimeout(this.readTimeout); builder.setHttpProxy(this.proxy); builder.setCaPath(this.caPath); builder.setRequestInfo(this.httpRequestInfo); builder.addRequestBodyConverter(this.requestBodyConverter); builder.addResponseBodyConverter(this.responseBodyConverter); builder.setRequestContext(this.context); return builder; } } export class RequestBuilder { constructor(j8) { this.method = HttpMethodEnum.GET; this.headers = new List(); this.responseType = ResponseBodyTypeEnum.STRING; this.connectTimeout = 30 * 1000; this.readTimeout = 30 * 1000; this.proxy = false; this.capath = ""; this.responseStreaming = false; this.maxResponseBodyLength = -1; this.context = new RequestContext(); this.requestUrl = j8; this.requestInfo = new HttpRequestInfo(j8); } build() { return new Request(this.requestUrl, this.method, this.headers, this.responseType, this.requestBodyConverter, this.responseBodyConverter, this.requestBody, this.connectTimeout, this.readTimeout, this.proxy, this.capath, this.requestInfo, this.context); } setUrl(url) { this.requestUrl = url; return this; } requestMethod(method) { this.method = method; return this; } requestHeaders(headers) { this.headers = headers; return this; } requestStreaming(i8) { this.responseStreaming = i8; return this; } responseBodyType(type) { this.responseType = type; return this; } postRequestBody(body) { this.requestBody = body; return this; } addRequestBodyConverter(h8) { this.requestBodyConverter = h8; return this; } addResponseBodyConverter(g8) { this.responseBodyConverter = g8; return this; } setConnectTimeout(timeout) { this.connectTimeout = timeout; return this; } setReadTimeout(timeout) { this.readTimeout = timeout; return this; } setHttpProxy(proxy) { this.proxy = proxy; return this; } setCaPath(caPath) { this.capath = caPath; return this; } setRequestInfo(f8) { this.requestInfo = f8; return this; } setRequestContext(context) { this.context = context; return this; } } 