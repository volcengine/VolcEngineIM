import webview from "@ohos.web.webview"; import List from '@ohos.util.List'; import { Header } from "../ttnet/a/d"; import { TTLogger } from "../ttnet/p/l1"; import { HttpUtils } from "../ttnet/p/m1"; import { TTJson } from "../ttnet/p/n1"; export class CronetCookieManager { constructor() { this.shareCookieHostsString = ''; this.shareCookieHosts = []; this.shareCookieHostsWithoutFirstDot = []; this.cookieHostPattern = new RegExp('(?<=Domain=)([^;]*)', "i"); this.enableCronetCookieManager = false; this.enableCookieWithDispatch = false; } static inst() { if (!CronetCookieManager.instance) { CronetCookieManager.instance = new CronetCookieManager(); } return CronetCookieManager.instance; } setEnableCronetCookieManager(enable) { this.enableCronetCookieManager = enable; } setEnableCookieWithDispatch(enable) { this.enableCookieWithDispatch = enable; } getEnableCookieWithDispatch() { return this.enableCookieWithDispatch; } async saveSharedCookie(response) { if (!this.enableCronetCookieManager) { return; } let p4 = new List(); for (let header of response.getHeaders()) { if (header.getName().toLowerCase() === "set-cookie") { p4.add(header.getValue()); } } if (p4.length <= 0) { return; } let q4 = HttpUtils.safeCreateUri(response.getUrl()); if (!q4) { return; } let r4 = false; let s4 = q4.host; for (let t4 of p4) { if (t4.toLowerCase().trim().includes("sessionid=")) { r4 = true; } TTLogger.debug(CronetCookieManager.TAG, "saveSharedCookie process url: " + response.getUrl() + " setCookieValue: " + t4); let u4 = this.cookieHostPattern.exec(t4); let v4 = u4 == null ? "" : u4[0]; let w4 = false; if (v4.startsWith(".")) { for (let c5 of this.shareCookieHosts) { if (c5 === v4) { w4 = true; } } } else { for (let b5 of this.shareCookieHostsWithoutFirstDot) { if (b5 === v4) { w4 = true; } } } if (!w4) { let a5 = q4.scheme + "://" + v4 + '/'; TTLogger.debug(CronetCookieManager.TAG, "no share, configUrl is " + a5 + " setcookie is " + t4); await webview.WebCookieManager.configCookie(a5, t4); continue; } if (this.shareCookieHosts) { for (let x4 of this.shareCookieHosts) { if (x4.length <= 0) { continue; } let y4 = t4.replace(v4, x4); let z4 = q4.scheme + "://" + x4 + '/'; TTLogger.debug(CronetCookieManager.TAG, "share, configUrl is " + z4 + " new setcookie is " + y4); await webview.WebCookieManager.configCookie(z4, y4); } } } if (r4) { TTLogger.debug(CronetCookieManager.TAG, "forceFlushCookie saveCookieAsync"); await webview.WebCookieManager.saveCookieAsync(); } } async addCookieHeaderToRequest(request, k4) { if (!this.enableCronetCookieManager) { return request; } let l4 = Date.now(); if (request.getRequestContext().bypassCronetCookie === true) { request.getHttpRequestInfo().addCookieHeaderDuration = Date.now() - l4; return request; } let m4 = ''; if (k4 && k4.length > 0) { m4 = await webview.WebCookieManager.fetchCookie(k4); } else { m4 = await webview.WebCookieManager.fetchCookie(request.getUrl()); } if (m4.length <= 0) { TTLogger.debug(CronetCookieManager.TAG, "addCookieHeaderToRequest no cookie for url: " + request.getUrl()); request.getHttpRequestInfo().addCookieHeaderDuration = Date.now() - l4; return request; } let n4 = request.newBuilder(request.getUrl()); let o4 = request.getHeaders(); o4.add(new Header("Cookie", m4)); n4.requestHeaders(o4); TTLogger.debug(CronetCookieManager.TAG, "addCookieHeaderToRequest url: " + request.getUrl() + " cookie: " + m4); request.getHttpRequestInfo().addCookieHeaderDuration = Date.now() - l4; return n4.build(); } async onTNCConfigUpdate(d4) { if (!this.enableCronetCookieManager) { return; } let e4 = this.shareCookieHostsString; let f4 = d4.getJsonObject(); const g4 = d4.getJsonObject(); if (!g4) { TTLogger.debug(CronetCookieManager.TAG, 'tnc config is undefined'); this.cleanShareCookieState(); return; } const data = g4 ? g4["data"] : undefined; if (!data) { TTLogger.debug(CronetCookieManager.TAG, 'tnc config data is undefined'); this.cleanShareCookieState(); return; } const h4 = data ? data['share_cookie_host_list'] : undefined; if (!h4 || h4.length <= 0) { TTLogger.debug(CronetCookieManager.TAG, 'tnc config data.share_cookie_host_list is undefined'); this.cleanShareCookieState(); return; } let i4 = this.parseCookieHostListFromString(h4); if (i4.length <= 1) { TTLogger.debug(CronetCookieManager.TAG, 'tnc config data.share_cookie_host_list is length 1'); this.cleanShareCookieState(); return; } this.shareCookieHostsString = h4; this.shareCookieHosts = i4; this.shareCookieHostsWithoutFirstDot = []; for (let j4 = 0; j4 < this.shareCookieHosts.length; ++j4) { if (this.shareCookieHosts[j4].startsWith('.')) { this.shareCookieHostsWithoutFirstDot.push(this.shareCookieHosts[j4].substring(1)); } else { this.shareCookieHostsWithoutFirstDot.push(this.shareCookieHosts[j4]); } } CronetCookieManager.inst().showDebugInfo(); await this.doSyncShareCookies(e4, this.shareCookieHostsString); } cleanShareCookieState() { this.shareCookieHostsString = ''; this.shareCookieHosts = []; this.shareCookieHostsWithoutFirstDot = []; CronetCookieManager.inst().showDebugInfo(); } async doSyncShareCookies(m3, n3) { const p3 = this.parseCookieHostListFromString(m3); const q3 = this.parseCookieHostListFromString(n3); const r3 = []; const s3 = []; let t3; for (const c4 of q3) { if (p3.includes(c4)) { TTLogger.debug(CronetCookieManager.TAG, "kept hosts add: " + c4); r3.push(c4); } else { TTLogger.debug(CronetCookieManager.TAG, "added hosts add: " + c4); s3.push(c4); } } TTLogger.debug(CronetCookieManager.TAG, "expectedTestCookieForUrl, added is " + TTJson.stringify(s3)); TTLogger.debug(CronetCookieManager.TAG, "expectedTestCookieForUrl, kept is " + TTJson.stringify(r3)); if (s3.length === 0) { return; } else if (r3.length > 0) { t3 = r3; } else { t3 = s3; } let u3 = ''; for (const a4 of t3) { try { let b4 = "https://" + a4 + "/"; u3 = await webview.WebCookieManager.fetchCookie(b4); TTLogger.debug(CronetCookieManager.TAG, "expectedTestCookieForUrl, get first source cookie is " + u3); if (u3.length > 0) { break; } } catch (e) { TTLogger.error(CronetCookieManager.TAG, "error1 is " + e); } } if (u3.length === 0) { return; } let cookies = u3.split(";"); for (let cookie of cookies) { cookie = cookie.replace(/\s+/g, ''); } let v3 = ""; let w3 = ""; for (const x3 of s3) { try { const y3 = "https://" + x3 + "/"; for (const cookie of cookies) { if (cookie.length > 0) { TTLogger.debug(CronetCookieManager.TAG, "expectedTestCookieForUrl, config first source cookie is " + u3 + " host is " + x3); let z3 = cookie + "; Domain=" + x3; v3 = x3; w3 = z3; await webview.WebCookieManager.configCookie(y3, z3); } } } catch (e) { TTLogger.error(CronetCookieManager.TAG, "error2 is " + e + " currnet host is " + v3 + " currnet cookie is " + w3); } } } parseCookieHostListFromString(i3) { const j3 = []; const k3 = i3.split(","); for (let l3 of k3) { if (l3.length > 1) { l3 = l3.trim(); j3.push(l3); } } return j3; } showDebugInfo() { TTLogger.debug(CronetCookieManager.TAG, "get tnc shareCookieHostsString : " + this.shareCookieHostsString); TTLogger.debug(CronetCookieManager.TAG, "get tnc shareCookieHosts : " + this.shareCookieHosts); TTLogger.debug(CronetCookieManager.TAG, "get tnc shareCookieHostsWithoutFirstDot : " + this.shareCookieHostsWithoutFirstDot); } } CronetCookieManager.TAG = CronetCookieManager.name; 