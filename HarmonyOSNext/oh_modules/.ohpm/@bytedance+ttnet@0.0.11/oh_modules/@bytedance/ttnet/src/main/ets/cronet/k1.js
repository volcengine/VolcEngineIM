import { TTCronetEngine } from '@bytedance/cronet/Index'; import { CronetAppProviderManager } from "./r"; import { OhosNetworkLibrary } from "./p1"; import { CronetCall } from "./o1"; import { CronetCookieManager } from "./s"; import { ClientKeyManager } from "../ttnet/g/b1"; import { JsonStorage } from "../ttnet/p/q"; import process from '@ohos.process'; import connection from "@ohos.net.connection"; import { TTLogger } from "../ttnet/p/l1"; import { TTNetworkUtils } from "../ttnet/f"; export class CronetHttpClient { constructor() { this.networkLibrary = new OhosNetworkLibrary(); this.securityCallback = 0; this.securityCallbackWS = 0; this.freeCallback = 0; } static inst() { if (!CronetHttpClient.instance) { CronetHttpClient.instance = new CronetHttpClient(); } return CronetHttpClient.instance; } tryCreateCronetEngine() { if (!this.cronetEngine) { this.cronetEngine = new TTCronetEngine(); if (!CronetAppProviderManager.inst().loggerDebug()) { TTLogger.disableDebug(); } if (this.securityCallback !== 0) { this.cronetEngine.setOpaque(this.securityCallback, this.securityCallbackWS, this.freeCallback); } this.cronetEngine.setTNCConfigUpdatedCallback((w5) => { let x5 = new JsonStorage(w5); CronetAppProviderManager.inst().onTNCConfigUpdated(x5); CronetCookieManager.inst().onTNCConfigUpdate(x5); this.networkLibrary.onTNCConfigUpdate(x5); ClientKeyManager.getInstance().onTNCConfigUpdated(x5); }); let m5 = { appInfo: this.getAppInfo(), storagePath: CronetAppProviderManager.inst().getContext().cacheDir + "/ttnet_storage", enableBrotli: CronetAppProviderManager.inst().isEnableBrotli(), enableQuic: CronetAppProviderManager.inst().isEnableQuic(), enableHttp2: CronetAppProviderManager.inst().isEnableHttp2(), enableVerboseLog: CronetAppProviderManager.inst().loggerDebug(), }; const n5 = CronetAppProviderManager.inst().getOpaqueData(); if (n5 != null) { m5.opaqueData = n5; } if (CronetAppProviderManager.inst().getProxyConfig().length !== 0) { m5.proxyConfig = CronetAppProviderManager.inst().getProxyConfig(); } const o5 = CronetAppProviderManager.inst().getQuicHint(); if (o5 != null && o5.size > 0) { const array = new Array(); o5.forEach((value, key) => { array.push({ host: key, port: value[0], alternatePort: value[1] }); }); m5.quicHints = array; } const p5 = this.cronetEngine.start(m5); if (p5 != 0) { const u5 = this.cronetEngine.getErrorString(p5); this.cronetEngine = undefined; TTNetworkUtils.getEventListenerManager().onInitFailed(p5, u5); throw new Error("engine start failed: " + u5); } this.initBizModules().then(() => { }); connection.getDefaultHttpProxy().then((proxy) => { if (proxy.host.length > 0) { let t5 = "http=" + proxy.host + ":" + proxy.port + ";https=" + proxy.host + ":" + proxy.port; this.cronetEngine?.setProxy(t5); } }); TTNetworkUtils.getEventListenerManager().onInitSucceed(); } } async initBizModules() { ClientKeyManager.getInstance().initClientKeyAndSessionInfo(); this.networkLibrary.initNotifyCronet(true); } async getCurrentNetworkState() { try { return await this.networkLibrary.getCurrentState(); } catch (e) { throw new Error("getCurrentNetworkState failed"); } } async setEnableRefreshProxy(enable, l5) { try { this.networkLibrary.setEnableRefreshProxy(enable, l5); } catch (e) { throw new Error("getCurrentNetworkState failed"); } } getCronetEngine() { return this.cronetEngine; } getAppInfo() { let appInfo = { appId: CronetAppProviderManager.inst().getAppId(), appName: CronetAppProviderManager.inst().getAppName(), deviceId: CronetAppProviderManager.inst().getDeviceId(), versionCode: CronetAppProviderManager.inst().getVersionCode(), deviceType: CronetAppProviderManager.inst().getDeviceType(), channel: CronetAppProviderManager.inst().getChannel(), devicePlatform: CronetAppProviderManager.inst().getDevicePlatform(), updateVersionCode: CronetAppProviderManager.inst().getUpdateVersionCode(), tncHostFirst: CronetAppProviderManager.inst().getGetDomainDependHostMap().get("first"), tncHostSecond: CronetAppProviderManager.inst().getGetDomainDependHostMap().get("second"), tncHostThird: CronetAppProviderManager.inst().getGetDomainDependHostMap().get("third"), isMainProcess: (process.tid === process.pid) ? "1" : "0", isDropFirstTnc: CronetAppProviderManager.inst().getIsDropFirstTnc(), domainHttpDns: CronetAppProviderManager.inst().getTTNetServiceDomainMap().get("httpdns"), domainBoe: CronetAppProviderManager.inst().getTTNetServiceDomainMap().get("boe"), getDomainDefaultJson: CronetAppProviderManager.inst().getGetDomainDefaultJSON(), tncLoadFlags: parseInt(CronetAppProviderManager.inst().getTNCRequestFlags()), httpdnsLoadFlags: parseInt(CronetAppProviderManager.inst().getHttpDnsRequestFlags()), }; const h5 = CronetAppProviderManager.inst().getTNCRequestHeader(); if (h5 != null) { let obj = {}; h5.forEach((value, key) => { obj[key] = value; }); appInfo.tncHeaders = obj; } const i5 = CronetAppProviderManager.inst().getTNCRequestQuery(); if (i5 != null) { let obj = {}; i5.forEach((value, key) => { obj[key] = value; }); appInfo.tncQueries = obj; } return appInfo; } setProxy(proxy) { if (!this.cronetEngine) { return; } this.cronetEngine.setProxy(proxy); } triggerGetDomain(g5) { if (!this.cronetEngine) { throw new Error("CronetEngine has not been initialized."); } if (g5) { this.cronetEngine.triggerGetDomain(); } else { this.cronetEngine.triggerGetDomain(this.getAppInfo()); } } urlDispatch(url) { if (!this.cronetEngine) { throw new Error("CronetEngine has not been initialized."); } return this.cronetEngine.urlDispatch(url); } setOpaque(d5, e5, f5) { if (!this.cronetEngine) { this.securityCallback = d5; this.securityCallbackWS = e5 ? e5 : 0; this.freeCallback = f5 ? f5 : 0; } else { this.cronetEngine.setOpaque(d5, e5, f5); } } setSecurityCallbackForTesting(callback) { if (this.cronetEngine) { this.cronetEngine.setSecurityCallbackForTesting(callback); } } newSsCall(request) { return new CronetCall(request); } } 